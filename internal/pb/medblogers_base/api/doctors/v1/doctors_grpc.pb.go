// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: doctors/v1/doctors.proto

package v1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DoctorService_GetSettings_FullMethodName               = "/doctor.v1.DoctorService/GetSettings"
	DoctorService_GetCounters_FullMethodName               = "/doctor.v1.DoctorService/GetCounters"
	DoctorService_GetPreliminaryFilterCount_FullMethodName = "/doctor.v1.DoctorService/GetPreliminaryFilterCount"
	DoctorService_GetPagesCount_FullMethodName             = "/doctor.v1.DoctorService/GetPagesCount"
	DoctorService_GetCities_FullMethodName                 = "/doctor.v1.DoctorService/GetCities"
	DoctorService_GetSpecialities_FullMethodName           = "/doctor.v1.DoctorService/GetSpecialities"
	DoctorService_Search_FullMethodName                    = "/doctor.v1.DoctorService/Search"
	DoctorService_Filter_FullMethodName                    = "/doctor.v1.DoctorService/Filter"
	DoctorService_CreateDoctor_FullMethodName              = "/doctor.v1.DoctorService/CreateDoctor"
	DoctorService_GetDoctor_FullMethodName                 = "/doctor.v1.DoctorService/GetDoctor"
)

// DoctorServiceClient is the client API for DoctorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Сервис для работы с докторами
type DoctorServiceClient interface {
	GetSettings(ctx context.Context, in *GetSettingsRequest, opts ...grpc.CallOption) (*GetSettingsResponse, error)
	GetCounters(ctx context.Context, in *GetCountersRequest, opts ...grpc.CallOption) (*GetCountersResponse, error)
	GetPreliminaryFilterCount(ctx context.Context, in *PreliminaryFilterCountRequest, opts ...grpc.CallOption) (*PreliminaryFilterCountResponse, error)
	GetPagesCount(ctx context.Context, in *PagesCountRequest, opts ...grpc.CallOption) (*PagesCountResponse, error)
	GetCities(ctx context.Context, in *GetCitiesRequest, opts ...grpc.CallOption) (*CitiesResponse, error)
	GetSpecialities(ctx context.Context, in *GetSpecialitiesRequest, opts ...grpc.CallOption) (*SpecialitiesResponse, error)
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	Filter(ctx context.Context, in *FilterRequest, opts ...grpc.CallOption) (*FilterResponse, error)
	CreateDoctor(ctx context.Context, in *CreateDoctorRequest, opts ...grpc.CallOption) (*CreateDoctorResponse, error)
	GetDoctor(ctx context.Context, in *GetDoctorRequest, opts ...grpc.CallOption) (*GetDoctorResponse, error)
}

type doctorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDoctorServiceClient(cc grpc.ClientConnInterface) DoctorServiceClient {
	return &doctorServiceClient{cc}
}

func (c *doctorServiceClient) GetSettings(ctx context.Context, in *GetSettingsRequest, opts ...grpc.CallOption) (*GetSettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSettingsResponse)
	err := c.cc.Invoke(ctx, DoctorService_GetSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorServiceClient) GetCounters(ctx context.Context, in *GetCountersRequest, opts ...grpc.CallOption) (*GetCountersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCountersResponse)
	err := c.cc.Invoke(ctx, DoctorService_GetCounters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorServiceClient) GetPreliminaryFilterCount(ctx context.Context, in *PreliminaryFilterCountRequest, opts ...grpc.CallOption) (*PreliminaryFilterCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PreliminaryFilterCountResponse)
	err := c.cc.Invoke(ctx, DoctorService_GetPreliminaryFilterCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorServiceClient) GetPagesCount(ctx context.Context, in *PagesCountRequest, opts ...grpc.CallOption) (*PagesCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PagesCountResponse)
	err := c.cc.Invoke(ctx, DoctorService_GetPagesCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorServiceClient) GetCities(ctx context.Context, in *GetCitiesRequest, opts ...grpc.CallOption) (*CitiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CitiesResponse)
	err := c.cc.Invoke(ctx, DoctorService_GetCities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorServiceClient) GetSpecialities(ctx context.Context, in *GetSpecialitiesRequest, opts ...grpc.CallOption) (*SpecialitiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SpecialitiesResponse)
	err := c.cc.Invoke(ctx, DoctorService_GetSpecialities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, DoctorService_Search_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorServiceClient) Filter(ctx context.Context, in *FilterRequest, opts ...grpc.CallOption) (*FilterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FilterResponse)
	err := c.cc.Invoke(ctx, DoctorService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorServiceClient) CreateDoctor(ctx context.Context, in *CreateDoctorRequest, opts ...grpc.CallOption) (*CreateDoctorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDoctorResponse)
	err := c.cc.Invoke(ctx, DoctorService_CreateDoctor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorServiceClient) GetDoctor(ctx context.Context, in *GetDoctorRequest, opts ...grpc.CallOption) (*GetDoctorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDoctorResponse)
	err := c.cc.Invoke(ctx, DoctorService_GetDoctor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DoctorServiceServer is the server API for DoctorService service.
// All implementations must embed UnimplementedDoctorServiceServer
// for forward compatibility.
//
// Сервис для работы с докторами
type DoctorServiceServer interface {
	GetSettings(context.Context, *GetSettingsRequest) (*GetSettingsResponse, error)
	GetCounters(context.Context, *GetCountersRequest) (*GetCountersResponse, error)
	GetPreliminaryFilterCount(context.Context, *PreliminaryFilterCountRequest) (*PreliminaryFilterCountResponse, error)
	GetPagesCount(context.Context, *PagesCountRequest) (*PagesCountResponse, error)
	GetCities(context.Context, *GetCitiesRequest) (*CitiesResponse, error)
	GetSpecialities(context.Context, *GetSpecialitiesRequest) (*SpecialitiesResponse, error)
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	Filter(context.Context, *FilterRequest) (*FilterResponse, error)
	CreateDoctor(context.Context, *CreateDoctorRequest) (*CreateDoctorResponse, error)
	GetDoctor(context.Context, *GetDoctorRequest) (*GetDoctorResponse, error)
	mustEmbedUnimplementedDoctorServiceServer()
}

// UnimplementedDoctorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDoctorServiceServer struct{}

func (UnimplementedDoctorServiceServer) GetSettings(context.Context, *GetSettingsRequest) (*GetSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSettings not implemented")
}
func (UnimplementedDoctorServiceServer) GetCounters(context.Context, *GetCountersRequest) (*GetCountersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCounters not implemented")
}
func (UnimplementedDoctorServiceServer) GetPreliminaryFilterCount(context.Context, *PreliminaryFilterCountRequest) (*PreliminaryFilterCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPreliminaryFilterCount not implemented")
}
func (UnimplementedDoctorServiceServer) GetPagesCount(context.Context, *PagesCountRequest) (*PagesCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPagesCount not implemented")
}
func (UnimplementedDoctorServiceServer) GetCities(context.Context, *GetCitiesRequest) (*CitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCities not implemented")
}
func (UnimplementedDoctorServiceServer) GetSpecialities(context.Context, *GetSpecialitiesRequest) (*SpecialitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpecialities not implemented")
}
func (UnimplementedDoctorServiceServer) Search(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedDoctorServiceServer) Filter(context.Context, *FilterRequest) (*FilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Filter not implemented")
}
func (UnimplementedDoctorServiceServer) CreateDoctor(context.Context, *CreateDoctorRequest) (*CreateDoctorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDoctor not implemented")
}
func (UnimplementedDoctorServiceServer) GetDoctor(context.Context, *GetDoctorRequest) (*GetDoctorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDoctor not implemented")
}
func (UnimplementedDoctorServiceServer) mustEmbedUnimplementedDoctorServiceServer() {}
func (UnimplementedDoctorServiceServer) testEmbeddedByValue()                       {}

// UnsafeDoctorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DoctorServiceServer will
// result in compilation errors.
type UnsafeDoctorServiceServer interface {
	mustEmbedUnimplementedDoctorServiceServer()
}

func RegisterDoctorServiceServer(s grpc.ServiceRegistrar, srv DoctorServiceServer) {
	// If the following call pancis, it indicates UnimplementedDoctorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DoctorService_ServiceDesc, srv)
}

func _DoctorService_GetSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServiceServer).GetSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DoctorService_GetSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServiceServer).GetSettings(ctx, req.(*GetSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorService_GetCounters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCountersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServiceServer).GetCounters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DoctorService_GetCounters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServiceServer).GetCounters(ctx, req.(*GetCountersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorService_GetPreliminaryFilterCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreliminaryFilterCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServiceServer).GetPreliminaryFilterCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DoctorService_GetPreliminaryFilterCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServiceServer).GetPreliminaryFilterCount(ctx, req.(*PreliminaryFilterCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorService_GetPagesCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PagesCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServiceServer).GetPagesCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DoctorService_GetPagesCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServiceServer).GetPagesCount(ctx, req.(*PagesCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorService_GetCities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServiceServer).GetCities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DoctorService_GetCities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServiceServer).GetCities(ctx, req.(*GetCitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorService_GetSpecialities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpecialitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServiceServer).GetSpecialities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DoctorService_GetSpecialities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServiceServer).GetSpecialities(ctx, req.(*GetSpecialitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DoctorService_Search_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServiceServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorService_Filter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServiceServer).Filter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DoctorService_Filter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServiceServer).Filter(ctx, req.(*FilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorService_CreateDoctor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDoctorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServiceServer).CreateDoctor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DoctorService_CreateDoctor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServiceServer).CreateDoctor(ctx, req.(*CreateDoctorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorService_GetDoctor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDoctorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServiceServer).GetDoctor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DoctorService_GetDoctor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServiceServer).GetDoctor(ctx, req.(*GetDoctorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DoctorService_ServiceDesc is the grpc.ServiceDesc for DoctorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DoctorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "doctor.v1.DoctorService",
	HandlerType: (*DoctorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSettings",
			Handler:    _DoctorService_GetSettings_Handler,
		},
		{
			MethodName: "GetCounters",
			Handler:    _DoctorService_GetCounters_Handler,
		},
		{
			MethodName: "GetPreliminaryFilterCount",
			Handler:    _DoctorService_GetPreliminaryFilterCount_Handler,
		},
		{
			MethodName: "GetPagesCount",
			Handler:    _DoctorService_GetPagesCount_Handler,
		},
		{
			MethodName: "GetCities",
			Handler:    _DoctorService_GetCities_Handler,
		},
		{
			MethodName: "GetSpecialities",
			Handler:    _DoctorService_GetSpecialities_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _DoctorService_Search_Handler,
		},
		{
			MethodName: "Filter",
			Handler:    _DoctorService_Filter_Handler,
		},
		{
			MethodName: "CreateDoctor",
			Handler:    _DoctorService_CreateDoctor_Handler,
		},
		{
			MethodName: "GetDoctor",
			Handler:    _DoctorService_GetDoctor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "doctors/v1/doctors.proto",
}
