// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: doctors/v1/doctors.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetSettingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSettingsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSettingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSettingsRequestMultiError, or nil if none found.
func (m *GetSettingsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSettingsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetSettingsRequestMultiError(errors)
	}

	return nil
}

// GetSettingsRequestMultiError is an error wrapping multiple validation errors
// returned by GetSettingsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetSettingsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSettingsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSettingsRequestMultiError) AllErrors() []error { return m }

// GetSettingsRequestValidationError is the validation error returned by
// GetSettingsRequest.Validate if the designated constraints aren't met.
type GetSettingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSettingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSettingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSettingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSettingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSettingsRequestValidationError) ErrorName() string {
	return "GetSettingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSettingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSettingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSettingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSettingsRequestValidationError{}

// Validate checks the field values on GetSettingsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSettingsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSettingsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSettingsResponseMultiError, or nil if none found.
func (m *GetSettingsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSettingsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFilterInfo() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSettingsResponseValidationError{
						field:  fmt.Sprintf("FilterInfo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSettingsResponseValidationError{
						field:  fmt.Sprintf("FilterInfo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSettingsResponseValidationError{
					field:  fmt.Sprintf("FilterInfo[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetCities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSettingsResponseValidationError{
						field:  fmt.Sprintf("Cities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSettingsResponseValidationError{
						field:  fmt.Sprintf("Cities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSettingsResponseValidationError{
					field:  fmt.Sprintf("Cities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetSpecialities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSettingsResponseValidationError{
						field:  fmt.Sprintf("Specialities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSettingsResponseValidationError{
						field:  fmt.Sprintf("Specialities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSettingsResponseValidationError{
					field:  fmt.Sprintf("Specialities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NewDoctorBanner

	if len(errors) > 0 {
		return GetSettingsResponseMultiError(errors)
	}

	return nil
}

// GetSettingsResponseMultiError is an error wrapping multiple validation
// errors returned by GetSettingsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetSettingsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSettingsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSettingsResponseMultiError) AllErrors() []error { return m }

// GetSettingsResponseValidationError is the validation error returned by
// GetSettingsResponse.Validate if the designated constraints aren't met.
type GetSettingsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSettingsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSettingsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSettingsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSettingsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSettingsResponseValidationError) ErrorName() string {
	return "GetSettingsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSettingsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSettingsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSettingsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSettingsResponseValidationError{}

// Validate checks the field values on GetCountersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCountersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCountersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCountersRequestMultiError, or nil if none found.
func (m *GetCountersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCountersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetCountersRequestMultiError(errors)
	}

	return nil
}

// GetCountersRequestMultiError is an error wrapping multiple validation errors
// returned by GetCountersRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCountersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCountersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCountersRequestMultiError) AllErrors() []error { return m }

// GetCountersRequestValidationError is the validation error returned by
// GetCountersRequest.Validate if the designated constraints aren't met.
type GetCountersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCountersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCountersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCountersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCountersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCountersRequestValidationError) ErrorName() string {
	return "GetCountersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCountersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCountersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCountersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCountersRequestValidationError{}

// Validate checks the field values on GetCountersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCountersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCountersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCountersResponseMultiError, or nil if none found.
func (m *GetCountersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCountersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DoctorsCount

	// no validation rules for SubscribersCount

	if len(errors) > 0 {
		return GetCountersResponseMultiError(errors)
	}

	return nil
}

// GetCountersResponseMultiError is an error wrapping multiple validation
// errors returned by GetCountersResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCountersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCountersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCountersResponseMultiError) AllErrors() []error { return m }

// GetCountersResponseValidationError is the validation error returned by
// GetCountersResponse.Validate if the designated constraints aren't met.
type GetCountersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCountersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCountersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCountersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCountersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCountersResponseValidationError) ErrorName() string {
	return "GetCountersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCountersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCountersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCountersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCountersResponseValidationError{}

// Validate checks the field values on GetCitiesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCitiesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCitiesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCitiesRequestMultiError, or nil if none found.
func (m *GetCitiesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCitiesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetCitiesRequestMultiError(errors)
	}

	return nil
}

// GetCitiesRequestMultiError is an error wrapping multiple validation errors
// returned by GetCitiesRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCitiesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCitiesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCitiesRequestMultiError) AllErrors() []error { return m }

// GetCitiesRequestValidationError is the validation error returned by
// GetCitiesRequest.Validate if the designated constraints aren't met.
type GetCitiesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCitiesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCitiesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCitiesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCitiesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCitiesRequestValidationError) ErrorName() string { return "GetCitiesRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetCitiesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCitiesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCitiesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCitiesRequestValidationError{}

// Validate checks the field values on CitiesResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CitiesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CitiesResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CitiesResponseMultiError,
// or nil if none found.
func (m *CitiesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CitiesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CitiesResponseValidationError{
						field:  fmt.Sprintf("Cities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CitiesResponseValidationError{
						field:  fmt.Sprintf("Cities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CitiesResponseValidationError{
					field:  fmt.Sprintf("Cities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CitiesResponseMultiError(errors)
	}

	return nil
}

// CitiesResponseMultiError is an error wrapping multiple validation errors
// returned by CitiesResponse.ValidateAll() if the designated constraints
// aren't met.
type CitiesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CitiesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CitiesResponseMultiError) AllErrors() []error { return m }

// CitiesResponseValidationError is the validation error returned by
// CitiesResponse.Validate if the designated constraints aren't met.
type CitiesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CitiesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CitiesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CitiesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CitiesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CitiesResponseValidationError) ErrorName() string { return "CitiesResponseValidationError" }

// Error satisfies the builtin error interface
func (e CitiesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCitiesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CitiesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CitiesResponseValidationError{}

// Validate checks the field values on GetSpecialitiesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSpecialitiesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSpecialitiesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSpecialitiesRequestMultiError, or nil if none found.
func (m *GetSpecialitiesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSpecialitiesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetSpecialitiesRequestMultiError(errors)
	}

	return nil
}

// GetSpecialitiesRequestMultiError is an error wrapping multiple validation
// errors returned by GetSpecialitiesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetSpecialitiesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSpecialitiesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSpecialitiesRequestMultiError) AllErrors() []error { return m }

// GetSpecialitiesRequestValidationError is the validation error returned by
// GetSpecialitiesRequest.Validate if the designated constraints aren't met.
type GetSpecialitiesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSpecialitiesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSpecialitiesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSpecialitiesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSpecialitiesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSpecialitiesRequestValidationError) ErrorName() string {
	return "GetSpecialitiesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSpecialitiesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSpecialitiesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSpecialitiesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSpecialitiesRequestValidationError{}

// Validate checks the field values on SpecialitiesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SpecialitiesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpecialitiesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SpecialitiesResponseMultiError, or nil if none found.
func (m *SpecialitiesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SpecialitiesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSpecialities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SpecialitiesResponseValidationError{
						field:  fmt.Sprintf("Specialities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SpecialitiesResponseValidationError{
						field:  fmt.Sprintf("Specialities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SpecialitiesResponseValidationError{
					field:  fmt.Sprintf("Specialities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SpecialitiesResponseMultiError(errors)
	}

	return nil
}

// SpecialitiesResponseMultiError is an error wrapping multiple validation
// errors returned by SpecialitiesResponse.ValidateAll() if the designated
// constraints aren't met.
type SpecialitiesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpecialitiesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpecialitiesResponseMultiError) AllErrors() []error { return m }

// SpecialitiesResponseValidationError is the validation error returned by
// SpecialitiesResponse.Validate if the designated constraints aren't met.
type SpecialitiesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpecialitiesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpecialitiesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpecialitiesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpecialitiesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpecialitiesResponseValidationError) ErrorName() string {
	return "SpecialitiesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SpecialitiesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpecialitiesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpecialitiesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpecialitiesResponseValidationError{}

// Validate checks the field values on SearchRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SearchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SearchRequestMultiError, or
// nil if none found.
func (m *SearchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Query

	if len(errors) > 0 {
		return SearchRequestMultiError(errors)
	}

	return nil
}

// SearchRequestMultiError is an error wrapping multiple validation errors
// returned by SearchRequest.ValidateAll() if the designated constraints
// aren't met.
type SearchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchRequestMultiError) AllErrors() []error { return m }

// SearchRequestValidationError is the validation error returned by
// SearchRequest.Validate if the designated constraints aren't met.
type SearchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchRequestValidationError) ErrorName() string { return "SearchRequestValidationError" }

// Error satisfies the builtin error interface
func (e SearchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchRequestValidationError{}

// Validate checks the field values on SearchResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SearchResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SearchResponseMultiError,
// or nil if none found.
func (m *SearchResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDoctors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchResponseValidationError{
						field:  fmt.Sprintf("Doctors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchResponseValidationError{
						field:  fmt.Sprintf("Doctors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchResponseValidationError{
					field:  fmt.Sprintf("Doctors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetCities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchResponseValidationError{
						field:  fmt.Sprintf("Cities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchResponseValidationError{
						field:  fmt.Sprintf("Cities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchResponseValidationError{
					field:  fmt.Sprintf("Cities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetSpecialities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchResponseValidationError{
						field:  fmt.Sprintf("Specialities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchResponseValidationError{
						field:  fmt.Sprintf("Specialities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchResponseValidationError{
					field:  fmt.Sprintf("Specialities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchResponseMultiError(errors)
	}

	return nil
}

// SearchResponseMultiError is an error wrapping multiple validation errors
// returned by SearchResponse.ValidateAll() if the designated constraints
// aren't met.
type SearchResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchResponseMultiError) AllErrors() []error { return m }

// SearchResponseValidationError is the validation error returned by
// SearchResponse.Validate if the designated constraints aren't met.
type SearchResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchResponseValidationError) ErrorName() string { return "SearchResponseValidationError" }

// Error satisfies the builtin error interface
func (e SearchResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchResponseValidationError{}

// Validate checks the field values on FilterRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FilterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilterRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FilterRequestMultiError, or
// nil if none found.
func (m *FilterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FilterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MaxSubscribers

	// no validation rules for MinSubscribers

	// no validation rules for Page

	// no validation rules for Sort

	if len(errors) > 0 {
		return FilterRequestMultiError(errors)
	}

	return nil
}

// FilterRequestMultiError is an error wrapping multiple validation errors
// returned by FilterRequest.ValidateAll() if the designated constraints
// aren't met.
type FilterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilterRequestMultiError) AllErrors() []error { return m }

// FilterRequestValidationError is the validation error returned by
// FilterRequest.Validate if the designated constraints aren't met.
type FilterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilterRequestValidationError) ErrorName() string { return "FilterRequestValidationError" }

// Error satisfies the builtin error interface
func (e FilterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilterRequestValidationError{}

// Validate checks the field values on FilterResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FilterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilterResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FilterResponseMultiError,
// or nil if none found.
func (m *FilterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FilterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDoctors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FilterResponseValidationError{
						field:  fmt.Sprintf("Doctors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FilterResponseValidationError{
						field:  fmt.Sprintf("Doctors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FilterResponseValidationError{
					field:  fmt.Sprintf("Doctors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Pages

	// no validation rules for CurrentPage

	// no validation rules for SubscribersCount

	if len(errors) > 0 {
		return FilterResponseMultiError(errors)
	}

	return nil
}

// FilterResponseMultiError is an error wrapping multiple validation errors
// returned by FilterResponse.ValidateAll() if the designated constraints
// aren't met.
type FilterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilterResponseMultiError) AllErrors() []error { return m }

// FilterResponseValidationError is the validation error returned by
// FilterResponse.Validate if the designated constraints aren't met.
type FilterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilterResponseValidationError) ErrorName() string { return "FilterResponseValidationError" }

// Error satisfies the builtin error interface
func (e FilterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilterResponseValidationError{}

// Validate checks the field values on CreateDoctorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDoctorRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDoctorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDoctorRequestMultiError, or nil if none found.
func (m *CreateDoctorRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDoctorRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetEmail()) > 255 {
		err := CreateDoctorRequestValidationError{
			field:  "Email",
			reason: "value length must be at most 255 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = CreateDoctorRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetLastName()); l < 1 || l > 100 {
		err := CreateDoctorRequestValidationError{
			field:  "LastName",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetFirstName()); l < 1 || l > 100 {
		err := CreateDoctorRequestValidationError{
			field:  "FirstName",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetMiddleName()); l < 1 || l > 100 {
		err := CreateDoctorRequestValidationError{
			field:  "MiddleName",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetBirthDate()) < 1 {
		err := CreateDoctorRequestValidationError{
			field:  "BirthDate",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetTelegramUsername()); l < 1 || l > 100 {
		err := CreateDoctorRequestValidationError{
			field:  "TelegramUsername",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAgreePolicy() != true {
		err := CreateDoctorRequestValidationError{
			field:  "AgreePolicy",
			reason: "value must equal true",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCityId() <= 0 {
		err := CreateDoctorRequestValidationError{
			field:  "CityId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetSpecialityId() <= 0 {
		err := CreateDoctorRequestValidationError{
			field:  "SpecialityId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetInstagramUsername()) > 100 {
		err := CreateDoctorRequestValidationError{
			field:  "InstagramUsername",
			reason: "value length must be at most 100 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetVkUsername()) > 100 {
		err := CreateDoctorRequestValidationError{
			field:  "VkUsername",
			reason: "value length must be at most 100 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDzenUsername()) > 100 {
		err := CreateDoctorRequestValidationError{
			field:  "DzenUsername",
			reason: "value length must be at most 100 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetYoutubeUsername()) > 100 {
		err := CreateDoctorRequestValidationError{
			field:  "YoutubeUsername",
			reason: "value length must be at most 100 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTelegramChannel()) > 100 {
		err := CreateDoctorRequestValidationError{
			field:  "TelegramChannel",
			reason: "value length must be at most 100 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSiteLink()) > 255 {
		err := CreateDoctorRequestValidationError{
			field:  "SiteLink",
			reason: "value length must be at most 255 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetMainBlogTheme()) > 100 {
		err := CreateDoctorRequestValidationError{
			field:  "MainBlogTheme",
			reason: "value length must be at most 100 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_CreateDoctorRequest_AdditionalCities_Unique := make(map[int64]struct{}, len(m.GetAdditionalCities()))

	for idx, item := range m.GetAdditionalCities() {
		_, _ = idx, item

		if _, exists := _CreateDoctorRequest_AdditionalCities_Unique[item]; exists {
			err := CreateDoctorRequestValidationError{
				field:  fmt.Sprintf("AdditionalCities[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_CreateDoctorRequest_AdditionalCities_Unique[item] = struct{}{}
		}

		// no validation rules for AdditionalCities[idx]
	}

	_CreateDoctorRequest_AdditionalSpecialties_Unique := make(map[int64]struct{}, len(m.GetAdditionalSpecialties()))

	for idx, item := range m.GetAdditionalSpecialties() {
		_, _ = idx, item

		if _, exists := _CreateDoctorRequest_AdditionalSpecialties_Unique[item]; exists {
			err := CreateDoctorRequestValidationError{
				field:  fmt.Sprintf("AdditionalSpecialties[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_CreateDoctorRequest_AdditionalSpecialties_Unique[item] = struct{}{}
		}

		// no validation rules for AdditionalSpecialties[idx]
	}

	if len(errors) > 0 {
		return CreateDoctorRequestMultiError(errors)
	}

	return nil
}

func (m *CreateDoctorRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *CreateDoctorRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// CreateDoctorRequestMultiError is an error wrapping multiple validation
// errors returned by CreateDoctorRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateDoctorRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDoctorRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDoctorRequestMultiError) AllErrors() []error { return m }

// CreateDoctorRequestValidationError is the validation error returned by
// CreateDoctorRequest.Validate if the designated constraints aren't met.
type CreateDoctorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDoctorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDoctorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDoctorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDoctorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDoctorRequestValidationError) ErrorName() string {
	return "CreateDoctorRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDoctorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDoctorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDoctorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDoctorRequestValidationError{}

// Validate checks the field values on CreateDoctorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDoctorResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDoctorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDoctorResponseMultiError, or nil if none found.
func (m *CreateDoctorResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDoctorResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetErrors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateDoctorResponseValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateDoctorResponseValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateDoctorResponseValidationError{
					field:  fmt.Sprintf("Errors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateDoctorResponseMultiError(errors)
	}

	return nil
}

// CreateDoctorResponseMultiError is an error wrapping multiple validation
// errors returned by CreateDoctorResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateDoctorResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDoctorResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDoctorResponseMultiError) AllErrors() []error { return m }

// CreateDoctorResponseValidationError is the validation error returned by
// CreateDoctorResponse.Validate if the designated constraints aren't met.
type CreateDoctorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDoctorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDoctorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDoctorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDoctorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDoctorResponseValidationError) ErrorName() string {
	return "CreateDoctorResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDoctorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDoctorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDoctorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDoctorResponseValidationError{}

// Validate checks the field values on GetDoctorRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetDoctorRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDoctorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDoctorRequestMultiError, or nil if none found.
func (m *GetDoctorRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDoctorRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DoctorSlug

	if len(errors) > 0 {
		return GetDoctorRequestMultiError(errors)
	}

	return nil
}

// GetDoctorRequestMultiError is an error wrapping multiple validation errors
// returned by GetDoctorRequest.ValidateAll() if the designated constraints
// aren't met.
type GetDoctorRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDoctorRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDoctorRequestMultiError) AllErrors() []error { return m }

// GetDoctorRequestValidationError is the validation error returned by
// GetDoctorRequest.Validate if the designated constraints aren't met.
type GetDoctorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDoctorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDoctorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDoctorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDoctorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDoctorRequestValidationError) ErrorName() string { return "GetDoctorRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetDoctorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDoctorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDoctorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDoctorRequestValidationError{}

// Validate checks the field values on GetDoctorResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetDoctorResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDoctorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDoctorResponseMultiError, or nil if none found.
func (m *GetDoctorResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDoctorResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Slug

	// no validation rules for InstUrl

	// no validation rules for VkUrl

	// no validation rules for DzenUrl

	// no validation rules for TgUrl

	// no validation rules for TgChannelUrl

	// no validation rules for YoutubeUrl

	// no validation rules for TiktokUrl

	// no validation rules for SiteLink

	for idx, item := range m.GetCities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetDoctorResponseValidationError{
						field:  fmt.Sprintf("Cities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetDoctorResponseValidationError{
						field:  fmt.Sprintf("Cities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetDoctorResponseValidationError{
					field:  fmt.Sprintf("Cities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetSpecialities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetDoctorResponseValidationError{
						field:  fmt.Sprintf("Specialities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetDoctorResponseValidationError{
						field:  fmt.Sprintf("Specialities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetDoctorResponseValidationError{
					field:  fmt.Sprintf("Specialities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetMainCity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDoctorResponseValidationError{
					field:  "MainCity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDoctorResponseValidationError{
					field:  "MainCity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMainCity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDoctorResponseValidationError{
				field:  "MainCity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMainSpeciality()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDoctorResponseValidationError{
					field:  "MainSpeciality",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDoctorResponseValidationError{
					field:  "MainSpeciality",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMainSpeciality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDoctorResponseValidationError{
				field:  "MainSpeciality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TgSubsCount

	// no validation rules for TgSubsCountText

	// no validation rules for TgLastUpdatedDate

	// no validation rules for InstSubsCount

	// no validation rules for InstSubsCountText

	// no validation rules for InstLastUpdatedDate

	// no validation rules for MainBlogTheme

	// no validation rules for Image

	if len(errors) > 0 {
		return GetDoctorResponseMultiError(errors)
	}

	return nil
}

// GetDoctorResponseMultiError is an error wrapping multiple validation errors
// returned by GetDoctorResponse.ValidateAll() if the designated constraints
// aren't met.
type GetDoctorResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDoctorResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDoctorResponseMultiError) AllErrors() []error { return m }

// GetDoctorResponseValidationError is the validation error returned by
// GetDoctorResponse.Validate if the designated constraints aren't met.
type GetDoctorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDoctorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDoctorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDoctorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDoctorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDoctorResponseValidationError) ErrorName() string {
	return "GetDoctorResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDoctorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDoctorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDoctorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDoctorResponseValidationError{}

// Validate checks the field values on PreliminaryFilterCountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PreliminaryFilterCountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PreliminaryFilterCountRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PreliminaryFilterCountRequestMultiError, or nil if none found.
func (m *PreliminaryFilterCountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PreliminaryFilterCountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MaxSubscribers

	// no validation rules for MinSubscribers

	// no validation rules for Page

	if len(errors) > 0 {
		return PreliminaryFilterCountRequestMultiError(errors)
	}

	return nil
}

// PreliminaryFilterCountRequestMultiError is an error wrapping multiple
// validation errors returned by PreliminaryFilterCountRequest.ValidateAll()
// if the designated constraints aren't met.
type PreliminaryFilterCountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PreliminaryFilterCountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PreliminaryFilterCountRequestMultiError) AllErrors() []error { return m }

// PreliminaryFilterCountRequestValidationError is the validation error
// returned by PreliminaryFilterCountRequest.Validate if the designated
// constraints aren't met.
type PreliminaryFilterCountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PreliminaryFilterCountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PreliminaryFilterCountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PreliminaryFilterCountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PreliminaryFilterCountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PreliminaryFilterCountRequestValidationError) ErrorName() string {
	return "PreliminaryFilterCountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PreliminaryFilterCountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPreliminaryFilterCountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PreliminaryFilterCountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PreliminaryFilterCountRequestValidationError{}

// Validate checks the field values on PreliminaryFilterCountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PreliminaryFilterCountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PreliminaryFilterCountResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PreliminaryFilterCountResponseMultiError, or nil if none found.
func (m *PreliminaryFilterCountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PreliminaryFilterCountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DoctorsCount

	if len(errors) > 0 {
		return PreliminaryFilterCountResponseMultiError(errors)
	}

	return nil
}

// PreliminaryFilterCountResponseMultiError is an error wrapping multiple
// validation errors returned by PreliminaryFilterCountResponse.ValidateAll()
// if the designated constraints aren't met.
type PreliminaryFilterCountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PreliminaryFilterCountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PreliminaryFilterCountResponseMultiError) AllErrors() []error { return m }

// PreliminaryFilterCountResponseValidationError is the validation error
// returned by PreliminaryFilterCountResponse.Validate if the designated
// constraints aren't met.
type PreliminaryFilterCountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PreliminaryFilterCountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PreliminaryFilterCountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PreliminaryFilterCountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PreliminaryFilterCountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PreliminaryFilterCountResponseValidationError) ErrorName() string {
	return "PreliminaryFilterCountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PreliminaryFilterCountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPreliminaryFilterCountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PreliminaryFilterCountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PreliminaryFilterCountResponseValidationError{}

// Validate checks the field values on GetSettingsResponse_FilterItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSettingsResponse_FilterItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSettingsResponse_FilterItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetSettingsResponse_FilterItemMultiError, or nil if none found.
func (m *GetSettingsResponse_FilterItem) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSettingsResponse_FilterItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Slug

	if len(errors) > 0 {
		return GetSettingsResponse_FilterItemMultiError(errors)
	}

	return nil
}

// GetSettingsResponse_FilterItemMultiError is an error wrapping multiple
// validation errors returned by GetSettingsResponse_FilterItem.ValidateAll()
// if the designated constraints aren't met.
type GetSettingsResponse_FilterItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSettingsResponse_FilterItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSettingsResponse_FilterItemMultiError) AllErrors() []error { return m }

// GetSettingsResponse_FilterItemValidationError is the validation error
// returned by GetSettingsResponse_FilterItem.Validate if the designated
// constraints aren't met.
type GetSettingsResponse_FilterItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSettingsResponse_FilterItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSettingsResponse_FilterItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSettingsResponse_FilterItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSettingsResponse_FilterItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSettingsResponse_FilterItemValidationError) ErrorName() string {
	return "GetSettingsResponse_FilterItemValidationError"
}

// Error satisfies the builtin error interface
func (e GetSettingsResponse_FilterItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSettingsResponse_FilterItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSettingsResponse_FilterItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSettingsResponse_FilterItemValidationError{}

// Validate checks the field values on GetSettingsResponse_CityItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSettingsResponse_CityItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSettingsResponse_CityItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSettingsResponse_CityItemMultiError, or nil if none found.
func (m *GetSettingsResponse_CityItem) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSettingsResponse_CityItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for DoctorsCount

	if len(errors) > 0 {
		return GetSettingsResponse_CityItemMultiError(errors)
	}

	return nil
}

// GetSettingsResponse_CityItemMultiError is an error wrapping multiple
// validation errors returned by GetSettingsResponse_CityItem.ValidateAll() if
// the designated constraints aren't met.
type GetSettingsResponse_CityItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSettingsResponse_CityItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSettingsResponse_CityItemMultiError) AllErrors() []error { return m }

// GetSettingsResponse_CityItemValidationError is the validation error returned
// by GetSettingsResponse_CityItem.Validate if the designated constraints
// aren't met.
type GetSettingsResponse_CityItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSettingsResponse_CityItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSettingsResponse_CityItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSettingsResponse_CityItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSettingsResponse_CityItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSettingsResponse_CityItemValidationError) ErrorName() string {
	return "GetSettingsResponse_CityItemValidationError"
}

// Error satisfies the builtin error interface
func (e GetSettingsResponse_CityItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSettingsResponse_CityItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSettingsResponse_CityItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSettingsResponse_CityItemValidationError{}

// Validate checks the field values on GetSettingsResponse_SpecialityItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetSettingsResponse_SpecialityItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSettingsResponse_SpecialityItem
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetSettingsResponse_SpecialityItemMultiError, or nil if none found.
func (m *GetSettingsResponse_SpecialityItem) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSettingsResponse_SpecialityItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for DoctorsCount

	if len(errors) > 0 {
		return GetSettingsResponse_SpecialityItemMultiError(errors)
	}

	return nil
}

// GetSettingsResponse_SpecialityItemMultiError is an error wrapping multiple
// validation errors returned by
// GetSettingsResponse_SpecialityItem.ValidateAll() if the designated
// constraints aren't met.
type GetSettingsResponse_SpecialityItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSettingsResponse_SpecialityItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSettingsResponse_SpecialityItemMultiError) AllErrors() []error { return m }

// GetSettingsResponse_SpecialityItemValidationError is the validation error
// returned by GetSettingsResponse_SpecialityItem.Validate if the designated
// constraints aren't met.
type GetSettingsResponse_SpecialityItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSettingsResponse_SpecialityItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSettingsResponse_SpecialityItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSettingsResponse_SpecialityItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSettingsResponse_SpecialityItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSettingsResponse_SpecialityItemValidationError) ErrorName() string {
	return "GetSettingsResponse_SpecialityItemValidationError"
}

// Error satisfies the builtin error interface
func (e GetSettingsResponse_SpecialityItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSettingsResponse_SpecialityItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSettingsResponse_SpecialityItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSettingsResponse_SpecialityItemValidationError{}

// Validate checks the field values on CitiesResponse_CityItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CitiesResponse_CityItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CitiesResponse_CityItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CitiesResponse_CityItemMultiError, or nil if none found.
func (m *CitiesResponse_CityItem) ValidateAll() error {
	return m.validate(true)
}

func (m *CitiesResponse_CityItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CityId

	// no validation rules for CityName

	if len(errors) > 0 {
		return CitiesResponse_CityItemMultiError(errors)
	}

	return nil
}

// CitiesResponse_CityItemMultiError is an error wrapping multiple validation
// errors returned by CitiesResponse_CityItem.ValidateAll() if the designated
// constraints aren't met.
type CitiesResponse_CityItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CitiesResponse_CityItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CitiesResponse_CityItemMultiError) AllErrors() []error { return m }

// CitiesResponse_CityItemValidationError is the validation error returned by
// CitiesResponse_CityItem.Validate if the designated constraints aren't met.
type CitiesResponse_CityItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CitiesResponse_CityItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CitiesResponse_CityItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CitiesResponse_CityItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CitiesResponse_CityItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CitiesResponse_CityItemValidationError) ErrorName() string {
	return "CitiesResponse_CityItemValidationError"
}

// Error satisfies the builtin error interface
func (e CitiesResponse_CityItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCitiesResponse_CityItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CitiesResponse_CityItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CitiesResponse_CityItemValidationError{}

// Validate checks the field values on SpecialitiesResponse_SpecialityItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SpecialitiesResponse_SpecialityItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpecialitiesResponse_SpecialityItem
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SpecialitiesResponse_SpecialityItemMultiError, or nil if none found.
func (m *SpecialitiesResponse_SpecialityItem) ValidateAll() error {
	return m.validate(true)
}

func (m *SpecialitiesResponse_SpecialityItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SpecialityId

	// no validation rules for SpecialityName

	if len(errors) > 0 {
		return SpecialitiesResponse_SpecialityItemMultiError(errors)
	}

	return nil
}

// SpecialitiesResponse_SpecialityItemMultiError is an error wrapping multiple
// validation errors returned by
// SpecialitiesResponse_SpecialityItem.ValidateAll() if the designated
// constraints aren't met.
type SpecialitiesResponse_SpecialityItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpecialitiesResponse_SpecialityItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpecialitiesResponse_SpecialityItemMultiError) AllErrors() []error { return m }

// SpecialitiesResponse_SpecialityItemValidationError is the validation error
// returned by SpecialitiesResponse_SpecialityItem.Validate if the designated
// constraints aren't met.
type SpecialitiesResponse_SpecialityItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpecialitiesResponse_SpecialityItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpecialitiesResponse_SpecialityItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpecialitiesResponse_SpecialityItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpecialitiesResponse_SpecialityItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpecialitiesResponse_SpecialityItemValidationError) ErrorName() string {
	return "SpecialitiesResponse_SpecialityItemValidationError"
}

// Error satisfies the builtin error interface
func (e SpecialitiesResponse_SpecialityItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpecialitiesResponse_SpecialityItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpecialitiesResponse_SpecialityItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpecialitiesResponse_SpecialityItemValidationError{}

// Validate checks the field values on SearchResponse_DoctorItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchResponse_DoctorItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchResponse_DoctorItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchResponse_DoctorItemMultiError, or nil if none found.
func (m *SearchResponse_DoctorItem) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchResponse_DoctorItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Slug

	// no validation rules for CityName

	// no validation rules for SpecialityName

	// no validation rules for Image

	if len(errors) > 0 {
		return SearchResponse_DoctorItemMultiError(errors)
	}

	return nil
}

// SearchResponse_DoctorItemMultiError is an error wrapping multiple validation
// errors returned by SearchResponse_DoctorItem.ValidateAll() if the
// designated constraints aren't met.
type SearchResponse_DoctorItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchResponse_DoctorItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchResponse_DoctorItemMultiError) AllErrors() []error { return m }

// SearchResponse_DoctorItemValidationError is the validation error returned by
// SearchResponse_DoctorItem.Validate if the designated constraints aren't met.
type SearchResponse_DoctorItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchResponse_DoctorItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchResponse_DoctorItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchResponse_DoctorItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchResponse_DoctorItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchResponse_DoctorItemValidationError) ErrorName() string {
	return "SearchResponse_DoctorItemValidationError"
}

// Error satisfies the builtin error interface
func (e SearchResponse_DoctorItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchResponse_DoctorItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchResponse_DoctorItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchResponse_DoctorItemValidationError{}

// Validate checks the field values on SearchResponse_CityItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchResponse_CityItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchResponse_CityItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchResponse_CityItemMultiError, or nil if none found.
func (m *SearchResponse_CityItem) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchResponse_CityItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for DoctorsCount

	if len(errors) > 0 {
		return SearchResponse_CityItemMultiError(errors)
	}

	return nil
}

// SearchResponse_CityItemMultiError is an error wrapping multiple validation
// errors returned by SearchResponse_CityItem.ValidateAll() if the designated
// constraints aren't met.
type SearchResponse_CityItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchResponse_CityItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchResponse_CityItemMultiError) AllErrors() []error { return m }

// SearchResponse_CityItemValidationError is the validation error returned by
// SearchResponse_CityItem.Validate if the designated constraints aren't met.
type SearchResponse_CityItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchResponse_CityItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchResponse_CityItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchResponse_CityItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchResponse_CityItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchResponse_CityItemValidationError) ErrorName() string {
	return "SearchResponse_CityItemValidationError"
}

// Error satisfies the builtin error interface
func (e SearchResponse_CityItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchResponse_CityItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchResponse_CityItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchResponse_CityItemValidationError{}

// Validate checks the field values on SearchResponse_SpecialityItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchResponse_SpecialityItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchResponse_SpecialityItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SearchResponse_SpecialityItemMultiError, or nil if none found.
func (m *SearchResponse_SpecialityItem) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchResponse_SpecialityItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for DoctorsCount

	if len(errors) > 0 {
		return SearchResponse_SpecialityItemMultiError(errors)
	}

	return nil
}

// SearchResponse_SpecialityItemMultiError is an error wrapping multiple
// validation errors returned by SearchResponse_SpecialityItem.ValidateAll()
// if the designated constraints aren't met.
type SearchResponse_SpecialityItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchResponse_SpecialityItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchResponse_SpecialityItemMultiError) AllErrors() []error { return m }

// SearchResponse_SpecialityItemValidationError is the validation error
// returned by SearchResponse_SpecialityItem.Validate if the designated
// constraints aren't met.
type SearchResponse_SpecialityItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchResponse_SpecialityItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchResponse_SpecialityItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchResponse_SpecialityItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchResponse_SpecialityItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchResponse_SpecialityItemValidationError) ErrorName() string {
	return "SearchResponse_SpecialityItemValidationError"
}

// Error satisfies the builtin error interface
func (e SearchResponse_SpecialityItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchResponse_SpecialityItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchResponse_SpecialityItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchResponse_SpecialityItemValidationError{}

// Validate checks the field values on FilterResponse_DoctorItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FilterResponse_DoctorItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilterResponse_DoctorItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FilterResponse_DoctorItemMultiError, or nil if none found.
func (m *FilterResponse_DoctorItem) ValidateAll() error {
	return m.validate(true)
}

func (m *FilterResponse_DoctorItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Slug

	// no validation rules for InstLink

	// no validation rules for InstSubsCount

	// no validation rules for InstSubsCountText

	// no validation rules for TgLink

	// no validation rules for TgSubsCount

	// no validation rules for TgSubsCountText

	// no validation rules for Speciality

	// no validation rules for City

	// no validation rules for Image

	if len(errors) > 0 {
		return FilterResponse_DoctorItemMultiError(errors)
	}

	return nil
}

// FilterResponse_DoctorItemMultiError is an error wrapping multiple validation
// errors returned by FilterResponse_DoctorItem.ValidateAll() if the
// designated constraints aren't met.
type FilterResponse_DoctorItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilterResponse_DoctorItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilterResponse_DoctorItemMultiError) AllErrors() []error { return m }

// FilterResponse_DoctorItemValidationError is the validation error returned by
// FilterResponse_DoctorItem.Validate if the designated constraints aren't met.
type FilterResponse_DoctorItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilterResponse_DoctorItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilterResponse_DoctorItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilterResponse_DoctorItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilterResponse_DoctorItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilterResponse_DoctorItemValidationError) ErrorName() string {
	return "FilterResponse_DoctorItemValidationError"
}

// Error satisfies the builtin error interface
func (e FilterResponse_DoctorItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilterResponse_DoctorItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilterResponse_DoctorItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilterResponse_DoctorItemValidationError{}

// Validate checks the field values on CreateDoctorResponse_ValidationError
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateDoctorResponse_ValidationError) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDoctorResponse_ValidationError
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateDoctorResponse_ValidationErrorMultiError, or nil if none found.
func (m *CreateDoctorResponse_ValidationError) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDoctorResponse_ValidationError) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Field

	// no validation rules for Text

	if len(errors) > 0 {
		return CreateDoctorResponse_ValidationErrorMultiError(errors)
	}

	return nil
}

// CreateDoctorResponse_ValidationErrorMultiError is an error wrapping multiple
// validation errors returned by
// CreateDoctorResponse_ValidationError.ValidateAll() if the designated
// constraints aren't met.
type CreateDoctorResponse_ValidationErrorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDoctorResponse_ValidationErrorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDoctorResponse_ValidationErrorMultiError) AllErrors() []error { return m }

// CreateDoctorResponse_ValidationErrorValidationError is the validation error
// returned by CreateDoctorResponse_ValidationError.Validate if the designated
// constraints aren't met.
type CreateDoctorResponse_ValidationErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDoctorResponse_ValidationErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDoctorResponse_ValidationErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDoctorResponse_ValidationErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDoctorResponse_ValidationErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDoctorResponse_ValidationErrorValidationError) ErrorName() string {
	return "CreateDoctorResponse_ValidationErrorValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDoctorResponse_ValidationErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDoctorResponse_ValidationError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDoctorResponse_ValidationErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDoctorResponse_ValidationErrorValidationError{}

// Validate checks the field values on GetDoctorResponse_CityItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDoctorResponse_CityItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDoctorResponse_CityItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDoctorResponse_CityItemMultiError, or nil if none found.
func (m *GetDoctorResponse_CityItem) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDoctorResponse_CityItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return GetDoctorResponse_CityItemMultiError(errors)
	}

	return nil
}

// GetDoctorResponse_CityItemMultiError is an error wrapping multiple
// validation errors returned by GetDoctorResponse_CityItem.ValidateAll() if
// the designated constraints aren't met.
type GetDoctorResponse_CityItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDoctorResponse_CityItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDoctorResponse_CityItemMultiError) AllErrors() []error { return m }

// GetDoctorResponse_CityItemValidationError is the validation error returned
// by GetDoctorResponse_CityItem.Validate if the designated constraints aren't met.
type GetDoctorResponse_CityItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDoctorResponse_CityItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDoctorResponse_CityItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDoctorResponse_CityItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDoctorResponse_CityItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDoctorResponse_CityItemValidationError) ErrorName() string {
	return "GetDoctorResponse_CityItemValidationError"
}

// Error satisfies the builtin error interface
func (e GetDoctorResponse_CityItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDoctorResponse_CityItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDoctorResponse_CityItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDoctorResponse_CityItemValidationError{}

// Validate checks the field values on GetDoctorResponse_SpecialityItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetDoctorResponse_SpecialityItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDoctorResponse_SpecialityItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetDoctorResponse_SpecialityItemMultiError, or nil if none found.
func (m *GetDoctorResponse_SpecialityItem) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDoctorResponse_SpecialityItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return GetDoctorResponse_SpecialityItemMultiError(errors)
	}

	return nil
}

// GetDoctorResponse_SpecialityItemMultiError is an error wrapping multiple
// validation errors returned by
// GetDoctorResponse_SpecialityItem.ValidateAll() if the designated
// constraints aren't met.
type GetDoctorResponse_SpecialityItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDoctorResponse_SpecialityItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDoctorResponse_SpecialityItemMultiError) AllErrors() []error { return m }

// GetDoctorResponse_SpecialityItemValidationError is the validation error
// returned by GetDoctorResponse_SpecialityItem.Validate if the designated
// constraints aren't met.
type GetDoctorResponse_SpecialityItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDoctorResponse_SpecialityItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDoctorResponse_SpecialityItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDoctorResponse_SpecialityItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDoctorResponse_SpecialityItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDoctorResponse_SpecialityItemValidationError) ErrorName() string {
	return "GetDoctorResponse_SpecialityItemValidationError"
}

// Error satisfies the builtin error interface
func (e GetDoctorResponse_SpecialityItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDoctorResponse_SpecialityItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDoctorResponse_SpecialityItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDoctorResponse_SpecialityItemValidationError{}
