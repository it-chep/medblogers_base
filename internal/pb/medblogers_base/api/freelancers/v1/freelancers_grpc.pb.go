// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: freelancers/v1/freelancers.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FreelancerService_GetFreelancers_FullMethodName            = "/freelancers.v1.FreelancerService/GetFreelancers"
	FreelancerService_GetSettings_FullMethodName               = "/freelancers.v1.FreelancerService/GetSettings"
	FreelancerService_GetCounters_FullMethodName               = "/freelancers.v1.FreelancerService/GetCounters"
	FreelancerService_GetPreliminaryFilterCount_FullMethodName = "/freelancers.v1.FreelancerService/GetPreliminaryFilterCount"
	FreelancerService_GetPagesCount_FullMethodName             = "/freelancers.v1.FreelancerService/GetPagesCount"
	FreelancerService_GetCities_FullMethodName                 = "/freelancers.v1.FreelancerService/GetCities"
	FreelancerService_GetSpecialities_FullMethodName           = "/freelancers.v1.FreelancerService/GetSpecialities"
	FreelancerService_Search_FullMethodName                    = "/freelancers.v1.FreelancerService/Search"
	FreelancerService_Filter_FullMethodName                    = "/freelancers.v1.FreelancerService/Filter"
	FreelancerService_CreateDoctor_FullMethodName              = "/freelancers.v1.FreelancerService/CreateDoctor"
	FreelancerService_GetFreelancer_FullMethodName             = "/freelancers.v1.FreelancerService/GetFreelancer"
)

// FreelancerServiceClient is the client API for FreelancerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Сервис для работы с фрилансерами
type FreelancerServiceClient interface {
	GetFreelancers(ctx context.Context, in *GetFreelancersRequest, opts ...grpc.CallOption) (*GetFreelancersResponse, error)
	GetSettings(ctx context.Context, in *GetSettingsRequest, opts ...grpc.CallOption) (*GetSettingsResponse, error)
	GetCounters(ctx context.Context, in *GetCountersRequest, opts ...grpc.CallOption) (*GetCountersResponse, error)
	GetPreliminaryFilterCount(ctx context.Context, in *PreliminaryFilterCountRequest, opts ...grpc.CallOption) (*PreliminaryFilterCountResponse, error)
	GetPagesCount(ctx context.Context, in *PagesCountRequest, opts ...grpc.CallOption) (*PagesCountResponse, error)
	GetCities(ctx context.Context, in *GetCitiesRequest, opts ...grpc.CallOption) (*CitiesResponse, error)
	GetSpecialities(ctx context.Context, in *GetSpecialitiesRequest, opts ...grpc.CallOption) (*SpecialitiesResponse, error)
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	Filter(ctx context.Context, in *FilterRequest, opts ...grpc.CallOption) (*FilterResponse, error)
	CreateDoctor(ctx context.Context, in *CreateFreelancersRequest, opts ...grpc.CallOption) (*CreateFreelancersResponse, error)
	GetFreelancer(ctx context.Context, in *GetFreelancerRequest, opts ...grpc.CallOption) (*GetFreelancerResponse, error)
}

type freelancerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFreelancerServiceClient(cc grpc.ClientConnInterface) FreelancerServiceClient {
	return &freelancerServiceClient{cc}
}

func (c *freelancerServiceClient) GetFreelancers(ctx context.Context, in *GetFreelancersRequest, opts ...grpc.CallOption) (*GetFreelancersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFreelancersResponse)
	err := c.cc.Invoke(ctx, FreelancerService_GetFreelancers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *freelancerServiceClient) GetSettings(ctx context.Context, in *GetSettingsRequest, opts ...grpc.CallOption) (*GetSettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSettingsResponse)
	err := c.cc.Invoke(ctx, FreelancerService_GetSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *freelancerServiceClient) GetCounters(ctx context.Context, in *GetCountersRequest, opts ...grpc.CallOption) (*GetCountersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCountersResponse)
	err := c.cc.Invoke(ctx, FreelancerService_GetCounters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *freelancerServiceClient) GetPreliminaryFilterCount(ctx context.Context, in *PreliminaryFilterCountRequest, opts ...grpc.CallOption) (*PreliminaryFilterCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PreliminaryFilterCountResponse)
	err := c.cc.Invoke(ctx, FreelancerService_GetPreliminaryFilterCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *freelancerServiceClient) GetPagesCount(ctx context.Context, in *PagesCountRequest, opts ...grpc.CallOption) (*PagesCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PagesCountResponse)
	err := c.cc.Invoke(ctx, FreelancerService_GetPagesCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *freelancerServiceClient) GetCities(ctx context.Context, in *GetCitiesRequest, opts ...grpc.CallOption) (*CitiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CitiesResponse)
	err := c.cc.Invoke(ctx, FreelancerService_GetCities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *freelancerServiceClient) GetSpecialities(ctx context.Context, in *GetSpecialitiesRequest, opts ...grpc.CallOption) (*SpecialitiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SpecialitiesResponse)
	err := c.cc.Invoke(ctx, FreelancerService_GetSpecialities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *freelancerServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, FreelancerService_Search_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *freelancerServiceClient) Filter(ctx context.Context, in *FilterRequest, opts ...grpc.CallOption) (*FilterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FilterResponse)
	err := c.cc.Invoke(ctx, FreelancerService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *freelancerServiceClient) CreateDoctor(ctx context.Context, in *CreateFreelancersRequest, opts ...grpc.CallOption) (*CreateFreelancersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFreelancersResponse)
	err := c.cc.Invoke(ctx, FreelancerService_CreateDoctor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *freelancerServiceClient) GetFreelancer(ctx context.Context, in *GetFreelancerRequest, opts ...grpc.CallOption) (*GetFreelancerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFreelancerResponse)
	err := c.cc.Invoke(ctx, FreelancerService_GetFreelancer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FreelancerServiceServer is the server API for FreelancerService service.
// All implementations must embed UnimplementedFreelancerServiceServer
// for forward compatibility.
//
// Сервис для работы с фрилансерами
type FreelancerServiceServer interface {
	GetFreelancers(context.Context, *GetFreelancersRequest) (*GetFreelancersResponse, error)
	GetSettings(context.Context, *GetSettingsRequest) (*GetSettingsResponse, error)
	GetCounters(context.Context, *GetCountersRequest) (*GetCountersResponse, error)
	GetPreliminaryFilterCount(context.Context, *PreliminaryFilterCountRequest) (*PreliminaryFilterCountResponse, error)
	GetPagesCount(context.Context, *PagesCountRequest) (*PagesCountResponse, error)
	GetCities(context.Context, *GetCitiesRequest) (*CitiesResponse, error)
	GetSpecialities(context.Context, *GetSpecialitiesRequest) (*SpecialitiesResponse, error)
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	Filter(context.Context, *FilterRequest) (*FilterResponse, error)
	CreateDoctor(context.Context, *CreateFreelancersRequest) (*CreateFreelancersResponse, error)
	GetFreelancer(context.Context, *GetFreelancerRequest) (*GetFreelancerResponse, error)
	mustEmbedUnimplementedFreelancerServiceServer()
}

// UnimplementedFreelancerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFreelancerServiceServer struct{}

func (UnimplementedFreelancerServiceServer) GetFreelancers(context.Context, *GetFreelancersRequest) (*GetFreelancersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFreelancers not implemented")
}
func (UnimplementedFreelancerServiceServer) GetSettings(context.Context, *GetSettingsRequest) (*GetSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSettings not implemented")
}
func (UnimplementedFreelancerServiceServer) GetCounters(context.Context, *GetCountersRequest) (*GetCountersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCounters not implemented")
}
func (UnimplementedFreelancerServiceServer) GetPreliminaryFilterCount(context.Context, *PreliminaryFilterCountRequest) (*PreliminaryFilterCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPreliminaryFilterCount not implemented")
}
func (UnimplementedFreelancerServiceServer) GetPagesCount(context.Context, *PagesCountRequest) (*PagesCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPagesCount not implemented")
}
func (UnimplementedFreelancerServiceServer) GetCities(context.Context, *GetCitiesRequest) (*CitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCities not implemented")
}
func (UnimplementedFreelancerServiceServer) GetSpecialities(context.Context, *GetSpecialitiesRequest) (*SpecialitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpecialities not implemented")
}
func (UnimplementedFreelancerServiceServer) Search(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedFreelancerServiceServer) Filter(context.Context, *FilterRequest) (*FilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Filter not implemented")
}
func (UnimplementedFreelancerServiceServer) CreateDoctor(context.Context, *CreateFreelancersRequest) (*CreateFreelancersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDoctor not implemented")
}
func (UnimplementedFreelancerServiceServer) GetFreelancer(context.Context, *GetFreelancerRequest) (*GetFreelancerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFreelancer not implemented")
}
func (UnimplementedFreelancerServiceServer) mustEmbedUnimplementedFreelancerServiceServer() {}
func (UnimplementedFreelancerServiceServer) testEmbeddedByValue()                           {}

// UnsafeFreelancerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FreelancerServiceServer will
// result in compilation errors.
type UnsafeFreelancerServiceServer interface {
	mustEmbedUnimplementedFreelancerServiceServer()
}

func RegisterFreelancerServiceServer(s grpc.ServiceRegistrar, srv FreelancerServiceServer) {
	// If the following call pancis, it indicates UnimplementedFreelancerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FreelancerService_ServiceDesc, srv)
}

func _FreelancerService_GetFreelancers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFreelancersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FreelancerServiceServer).GetFreelancers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FreelancerService_GetFreelancers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FreelancerServiceServer).GetFreelancers(ctx, req.(*GetFreelancersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FreelancerService_GetSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FreelancerServiceServer).GetSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FreelancerService_GetSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FreelancerServiceServer).GetSettings(ctx, req.(*GetSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FreelancerService_GetCounters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCountersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FreelancerServiceServer).GetCounters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FreelancerService_GetCounters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FreelancerServiceServer).GetCounters(ctx, req.(*GetCountersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FreelancerService_GetPreliminaryFilterCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreliminaryFilterCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FreelancerServiceServer).GetPreliminaryFilterCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FreelancerService_GetPreliminaryFilterCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FreelancerServiceServer).GetPreliminaryFilterCount(ctx, req.(*PreliminaryFilterCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FreelancerService_GetPagesCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PagesCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FreelancerServiceServer).GetPagesCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FreelancerService_GetPagesCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FreelancerServiceServer).GetPagesCount(ctx, req.(*PagesCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FreelancerService_GetCities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FreelancerServiceServer).GetCities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FreelancerService_GetCities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FreelancerServiceServer).GetCities(ctx, req.(*GetCitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FreelancerService_GetSpecialities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpecialitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FreelancerServiceServer).GetSpecialities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FreelancerService_GetSpecialities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FreelancerServiceServer).GetSpecialities(ctx, req.(*GetSpecialitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FreelancerService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FreelancerServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FreelancerService_Search_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FreelancerServiceServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FreelancerService_Filter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FreelancerServiceServer).Filter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FreelancerService_Filter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FreelancerServiceServer).Filter(ctx, req.(*FilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FreelancerService_CreateDoctor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFreelancersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FreelancerServiceServer).CreateDoctor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FreelancerService_CreateDoctor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FreelancerServiceServer).CreateDoctor(ctx, req.(*CreateFreelancersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FreelancerService_GetFreelancer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFreelancerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FreelancerServiceServer).GetFreelancer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FreelancerService_GetFreelancer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FreelancerServiceServer).GetFreelancer(ctx, req.(*GetFreelancerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FreelancerService_ServiceDesc is the grpc.ServiceDesc for FreelancerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FreelancerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "freelancers.v1.FreelancerService",
	HandlerType: (*FreelancerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFreelancers",
			Handler:    _FreelancerService_GetFreelancers_Handler,
		},
		{
			MethodName: "GetSettings",
			Handler:    _FreelancerService_GetSettings_Handler,
		},
		{
			MethodName: "GetCounters",
			Handler:    _FreelancerService_GetCounters_Handler,
		},
		{
			MethodName: "GetPreliminaryFilterCount",
			Handler:    _FreelancerService_GetPreliminaryFilterCount_Handler,
		},
		{
			MethodName: "GetPagesCount",
			Handler:    _FreelancerService_GetPagesCount_Handler,
		},
		{
			MethodName: "GetCities",
			Handler:    _FreelancerService_GetCities_Handler,
		},
		{
			MethodName: "GetSpecialities",
			Handler:    _FreelancerService_GetSpecialities_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _FreelancerService_Search_Handler,
		},
		{
			MethodName: "Filter",
			Handler:    _FreelancerService_Filter_Handler,
		},
		{
			MethodName: "CreateDoctor",
			Handler:    _FreelancerService_CreateDoctor_Handler,
		},
		{
			MethodName: "GetFreelancer",
			Handler:    _FreelancerService_GetFreelancer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "freelancers/v1/freelancers.proto",
}
