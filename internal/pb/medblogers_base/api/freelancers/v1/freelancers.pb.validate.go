// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: freelancers/v1/freelancers.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetFreelancersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFreelancersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFreelancersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFreelancersRequestMultiError, or nil if none found.
func (m *GetFreelancersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFreelancersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetFreelancersRequestMultiError(errors)
	}

	return nil
}

// GetFreelancersRequestMultiError is an error wrapping multiple validation
// errors returned by GetFreelancersRequest.ValidateAll() if the designated
// constraints aren't met.
type GetFreelancersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFreelancersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFreelancersRequestMultiError) AllErrors() []error { return m }

// GetFreelancersRequestValidationError is the validation error returned by
// GetFreelancersRequest.Validate if the designated constraints aren't met.
type GetFreelancersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFreelancersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFreelancersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFreelancersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFreelancersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFreelancersRequestValidationError) ErrorName() string {
	return "GetFreelancersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetFreelancersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFreelancersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFreelancersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFreelancersRequestValidationError{}

// Validate checks the field values on GetFreelancersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFreelancersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFreelancersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFreelancersResponseMultiError, or nil if none found.
func (m *GetFreelancersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFreelancersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetFreelancersResponseMultiError(errors)
	}

	return nil
}

// GetFreelancersResponseMultiError is an error wrapping multiple validation
// errors returned by GetFreelancersResponse.ValidateAll() if the designated
// constraints aren't met.
type GetFreelancersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFreelancersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFreelancersResponseMultiError) AllErrors() []error { return m }

// GetFreelancersResponseValidationError is the validation error returned by
// GetFreelancersResponse.Validate if the designated constraints aren't met.
type GetFreelancersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFreelancersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFreelancersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFreelancersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFreelancersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFreelancersResponseValidationError) ErrorName() string {
	return "GetFreelancersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetFreelancersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFreelancersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFreelancersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFreelancersResponseValidationError{}

// Validate checks the field values on GetSettingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSettingsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSettingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSettingsRequestMultiError, or nil if none found.
func (m *GetSettingsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSettingsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetSettingsRequestMultiError(errors)
	}

	return nil
}

// GetSettingsRequestMultiError is an error wrapping multiple validation errors
// returned by GetSettingsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetSettingsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSettingsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSettingsRequestMultiError) AllErrors() []error { return m }

// GetSettingsRequestValidationError is the validation error returned by
// GetSettingsRequest.Validate if the designated constraints aren't met.
type GetSettingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSettingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSettingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSettingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSettingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSettingsRequestValidationError) ErrorName() string {
	return "GetSettingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSettingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSettingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSettingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSettingsRequestValidationError{}

// Validate checks the field values on GetSettingsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSettingsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSettingsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSettingsResponseMultiError, or nil if none found.
func (m *GetSettingsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSettingsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSocieties() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSettingsResponseValidationError{
						field:  fmt.Sprintf("Societies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSettingsResponseValidationError{
						field:  fmt.Sprintf("Societies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSettingsResponseValidationError{
					field:  fmt.Sprintf("Societies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetCities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSettingsResponseValidationError{
						field:  fmt.Sprintf("Cities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSettingsResponseValidationError{
						field:  fmt.Sprintf("Cities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSettingsResponseValidationError{
					field:  fmt.Sprintf("Cities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetSpecialities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSettingsResponseValidationError{
						field:  fmt.Sprintf("Specialities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSettingsResponseValidationError{
						field:  fmt.Sprintf("Specialities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSettingsResponseValidationError{
					field:  fmt.Sprintf("Specialities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetPriceCategories() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSettingsResponseValidationError{
						field:  fmt.Sprintf("PriceCategories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSettingsResponseValidationError{
						field:  fmt.Sprintf("PriceCategories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSettingsResponseValidationError{
					field:  fmt.Sprintf("PriceCategories[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetSettingsResponseMultiError(errors)
	}

	return nil
}

// GetSettingsResponseMultiError is an error wrapping multiple validation
// errors returned by GetSettingsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetSettingsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSettingsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSettingsResponseMultiError) AllErrors() []error { return m }

// GetSettingsResponseValidationError is the validation error returned by
// GetSettingsResponse.Validate if the designated constraints aren't met.
type GetSettingsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSettingsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSettingsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSettingsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSettingsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSettingsResponseValidationError) ErrorName() string {
	return "GetSettingsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSettingsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSettingsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSettingsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSettingsResponseValidationError{}

// Validate checks the field values on GetCountersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCountersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCountersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCountersRequestMultiError, or nil if none found.
func (m *GetCountersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCountersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetCountersRequestMultiError(errors)
	}

	return nil
}

// GetCountersRequestMultiError is an error wrapping multiple validation errors
// returned by GetCountersRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCountersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCountersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCountersRequestMultiError) AllErrors() []error { return m }

// GetCountersRequestValidationError is the validation error returned by
// GetCountersRequest.Validate if the designated constraints aren't met.
type GetCountersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCountersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCountersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCountersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCountersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCountersRequestValidationError) ErrorName() string {
	return "GetCountersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCountersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCountersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCountersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCountersRequestValidationError{}

// Validate checks the field values on GetCountersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCountersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCountersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCountersResponseMultiError, or nil if none found.
func (m *GetCountersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCountersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FreelancersCount

	if len(errors) > 0 {
		return GetCountersResponseMultiError(errors)
	}

	return nil
}

// GetCountersResponseMultiError is an error wrapping multiple validation
// errors returned by GetCountersResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCountersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCountersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCountersResponseMultiError) AllErrors() []error { return m }

// GetCountersResponseValidationError is the validation error returned by
// GetCountersResponse.Validate if the designated constraints aren't met.
type GetCountersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCountersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCountersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCountersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCountersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCountersResponseValidationError) ErrorName() string {
	return "GetCountersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCountersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCountersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCountersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCountersResponseValidationError{}

// Validate checks the field values on PreliminaryFilterCountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PreliminaryFilterCountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PreliminaryFilterCountRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PreliminaryFilterCountRequestMultiError, or nil if none found.
func (m *PreliminaryFilterCountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PreliminaryFilterCountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ExperienceWithDoctors

	// no validation rules for Page

	if len(errors) > 0 {
		return PreliminaryFilterCountRequestMultiError(errors)
	}

	return nil
}

// PreliminaryFilterCountRequestMultiError is an error wrapping multiple
// validation errors returned by PreliminaryFilterCountRequest.ValidateAll()
// if the designated constraints aren't met.
type PreliminaryFilterCountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PreliminaryFilterCountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PreliminaryFilterCountRequestMultiError) AllErrors() []error { return m }

// PreliminaryFilterCountRequestValidationError is the validation error
// returned by PreliminaryFilterCountRequest.Validate if the designated
// constraints aren't met.
type PreliminaryFilterCountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PreliminaryFilterCountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PreliminaryFilterCountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PreliminaryFilterCountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PreliminaryFilterCountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PreliminaryFilterCountRequestValidationError) ErrorName() string {
	return "PreliminaryFilterCountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PreliminaryFilterCountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPreliminaryFilterCountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PreliminaryFilterCountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PreliminaryFilterCountRequestValidationError{}

// Validate checks the field values on PreliminaryFilterCountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PreliminaryFilterCountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PreliminaryFilterCountResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PreliminaryFilterCountResponseMultiError, or nil if none found.
func (m *PreliminaryFilterCountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PreliminaryFilterCountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FreelancersCount

	if len(errors) > 0 {
		return PreliminaryFilterCountResponseMultiError(errors)
	}

	return nil
}

// PreliminaryFilterCountResponseMultiError is an error wrapping multiple
// validation errors returned by PreliminaryFilterCountResponse.ValidateAll()
// if the designated constraints aren't met.
type PreliminaryFilterCountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PreliminaryFilterCountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PreliminaryFilterCountResponseMultiError) AllErrors() []error { return m }

// PreliminaryFilterCountResponseValidationError is the validation error
// returned by PreliminaryFilterCountResponse.Validate if the designated
// constraints aren't met.
type PreliminaryFilterCountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PreliminaryFilterCountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PreliminaryFilterCountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PreliminaryFilterCountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PreliminaryFilterCountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PreliminaryFilterCountResponseValidationError) ErrorName() string {
	return "PreliminaryFilterCountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PreliminaryFilterCountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPreliminaryFilterCountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PreliminaryFilterCountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PreliminaryFilterCountResponseValidationError{}

// Validate checks the field values on PagesCountRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PagesCountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PagesCountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PagesCountRequestMultiError, or nil if none found.
func (m *PagesCountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PagesCountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ExperienceWithDoctors

	if len(errors) > 0 {
		return PagesCountRequestMultiError(errors)
	}

	return nil
}

// PagesCountRequestMultiError is an error wrapping multiple validation errors
// returned by PagesCountRequest.ValidateAll() if the designated constraints
// aren't met.
type PagesCountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PagesCountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PagesCountRequestMultiError) AllErrors() []error { return m }

// PagesCountRequestValidationError is the validation error returned by
// PagesCountRequest.Validate if the designated constraints aren't met.
type PagesCountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PagesCountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PagesCountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PagesCountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PagesCountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PagesCountRequestValidationError) ErrorName() string {
	return "PagesCountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PagesCountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPagesCountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PagesCountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PagesCountRequestValidationError{}

// Validate checks the field values on PagesCountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PagesCountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PagesCountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PagesCountResponseMultiError, or nil if none found.
func (m *PagesCountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PagesCountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PagesCount

	if len(errors) > 0 {
		return PagesCountResponseMultiError(errors)
	}

	return nil
}

// PagesCountResponseMultiError is an error wrapping multiple validation errors
// returned by PagesCountResponse.ValidateAll() if the designated constraints
// aren't met.
type PagesCountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PagesCountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PagesCountResponseMultiError) AllErrors() []error { return m }

// PagesCountResponseValidationError is the validation error returned by
// PagesCountResponse.Validate if the designated constraints aren't met.
type PagesCountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PagesCountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PagesCountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PagesCountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PagesCountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PagesCountResponseValidationError) ErrorName() string {
	return "PagesCountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PagesCountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPagesCountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PagesCountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PagesCountResponseValidationError{}

// Validate checks the field values on GetCitiesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCitiesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCitiesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCitiesRequestMultiError, or nil if none found.
func (m *GetCitiesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCitiesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetCitiesRequestMultiError(errors)
	}

	return nil
}

// GetCitiesRequestMultiError is an error wrapping multiple validation errors
// returned by GetCitiesRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCitiesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCitiesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCitiesRequestMultiError) AllErrors() []error { return m }

// GetCitiesRequestValidationError is the validation error returned by
// GetCitiesRequest.Validate if the designated constraints aren't met.
type GetCitiesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCitiesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCitiesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCitiesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCitiesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCitiesRequestValidationError) ErrorName() string { return "GetCitiesRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetCitiesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCitiesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCitiesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCitiesRequestValidationError{}

// Validate checks the field values on CitiesResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CitiesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CitiesResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CitiesResponseMultiError,
// or nil if none found.
func (m *CitiesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CitiesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CitiesResponseValidationError{
						field:  fmt.Sprintf("Cities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CitiesResponseValidationError{
						field:  fmt.Sprintf("Cities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CitiesResponseValidationError{
					field:  fmt.Sprintf("Cities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CitiesResponseMultiError(errors)
	}

	return nil
}

// CitiesResponseMultiError is an error wrapping multiple validation errors
// returned by CitiesResponse.ValidateAll() if the designated constraints
// aren't met.
type CitiesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CitiesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CitiesResponseMultiError) AllErrors() []error { return m }

// CitiesResponseValidationError is the validation error returned by
// CitiesResponse.Validate if the designated constraints aren't met.
type CitiesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CitiesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CitiesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CitiesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CitiesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CitiesResponseValidationError) ErrorName() string { return "CitiesResponseValidationError" }

// Error satisfies the builtin error interface
func (e CitiesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCitiesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CitiesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CitiesResponseValidationError{}

// Validate checks the field values on GetSpecialitiesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSpecialitiesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSpecialitiesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSpecialitiesRequestMultiError, or nil if none found.
func (m *GetSpecialitiesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSpecialitiesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetSpecialitiesRequestMultiError(errors)
	}

	return nil
}

// GetSpecialitiesRequestMultiError is an error wrapping multiple validation
// errors returned by GetSpecialitiesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetSpecialitiesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSpecialitiesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSpecialitiesRequestMultiError) AllErrors() []error { return m }

// GetSpecialitiesRequestValidationError is the validation error returned by
// GetSpecialitiesRequest.Validate if the designated constraints aren't met.
type GetSpecialitiesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSpecialitiesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSpecialitiesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSpecialitiesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSpecialitiesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSpecialitiesRequestValidationError) ErrorName() string {
	return "GetSpecialitiesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSpecialitiesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSpecialitiesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSpecialitiesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSpecialitiesRequestValidationError{}

// Validate checks the field values on SpecialitiesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SpecialitiesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpecialitiesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SpecialitiesResponseMultiError, or nil if none found.
func (m *SpecialitiesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SpecialitiesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSpecialities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SpecialitiesResponseValidationError{
						field:  fmt.Sprintf("Specialities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SpecialitiesResponseValidationError{
						field:  fmt.Sprintf("Specialities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SpecialitiesResponseValidationError{
					field:  fmt.Sprintf("Specialities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SpecialitiesResponseMultiError(errors)
	}

	return nil
}

// SpecialitiesResponseMultiError is an error wrapping multiple validation
// errors returned by SpecialitiesResponse.ValidateAll() if the designated
// constraints aren't met.
type SpecialitiesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpecialitiesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpecialitiesResponseMultiError) AllErrors() []error { return m }

// SpecialitiesResponseValidationError is the validation error returned by
// SpecialitiesResponse.Validate if the designated constraints aren't met.
type SpecialitiesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpecialitiesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpecialitiesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpecialitiesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpecialitiesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpecialitiesResponseValidationError) ErrorName() string {
	return "SpecialitiesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SpecialitiesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpecialitiesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpecialitiesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpecialitiesResponseValidationError{}

// Validate checks the field values on SearchRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SearchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SearchRequestMultiError, or
// nil if none found.
func (m *SearchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Query

	if len(errors) > 0 {
		return SearchRequestMultiError(errors)
	}

	return nil
}

// SearchRequestMultiError is an error wrapping multiple validation errors
// returned by SearchRequest.ValidateAll() if the designated constraints
// aren't met.
type SearchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchRequestMultiError) AllErrors() []error { return m }

// SearchRequestValidationError is the validation error returned by
// SearchRequest.Validate if the designated constraints aren't met.
type SearchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchRequestValidationError) ErrorName() string { return "SearchRequestValidationError" }

// Error satisfies the builtin error interface
func (e SearchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchRequestValidationError{}

// Validate checks the field values on SearchResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SearchResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SearchResponseMultiError,
// or nil if none found.
func (m *SearchResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFreelancers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchResponseValidationError{
						field:  fmt.Sprintf("Freelancers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchResponseValidationError{
						field:  fmt.Sprintf("Freelancers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchResponseValidationError{
					field:  fmt.Sprintf("Freelancers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetCities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchResponseValidationError{
						field:  fmt.Sprintf("Cities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchResponseValidationError{
						field:  fmt.Sprintf("Cities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchResponseValidationError{
					field:  fmt.Sprintf("Cities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetSpecialities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchResponseValidationError{
						field:  fmt.Sprintf("Specialities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchResponseValidationError{
						field:  fmt.Sprintf("Specialities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchResponseValidationError{
					field:  fmt.Sprintf("Specialities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchResponseMultiError(errors)
	}

	return nil
}

// SearchResponseMultiError is an error wrapping multiple validation errors
// returned by SearchResponse.ValidateAll() if the designated constraints
// aren't met.
type SearchResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchResponseMultiError) AllErrors() []error { return m }

// SearchResponseValidationError is the validation error returned by
// SearchResponse.Validate if the designated constraints aren't met.
type SearchResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchResponseValidationError) ErrorName() string { return "SearchResponseValidationError" }

// Error satisfies the builtin error interface
func (e SearchResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchResponseValidationError{}

// Validate checks the field values on FilterRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FilterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilterRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FilterRequestMultiError, or
// nil if none found.
func (m *FilterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FilterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ExperienceWithDoctors

	// no validation rules for Page

	if len(errors) > 0 {
		return FilterRequestMultiError(errors)
	}

	return nil
}

// FilterRequestMultiError is an error wrapping multiple validation errors
// returned by FilterRequest.ValidateAll() if the designated constraints
// aren't met.
type FilterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilterRequestMultiError) AllErrors() []error { return m }

// FilterRequestValidationError is the validation error returned by
// FilterRequest.Validate if the designated constraints aren't met.
type FilterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilterRequestValidationError) ErrorName() string { return "FilterRequestValidationError" }

// Error satisfies the builtin error interface
func (e FilterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilterRequestValidationError{}

// Validate checks the field values on FilterResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FilterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilterResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FilterResponseMultiError,
// or nil if none found.
func (m *FilterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FilterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFreelancers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FilterResponseValidationError{
						field:  fmt.Sprintf("Freelancers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FilterResponseValidationError{
						field:  fmt.Sprintf("Freelancers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FilterResponseValidationError{
					field:  fmt.Sprintf("Freelancers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FilterResponseMultiError(errors)
	}

	return nil
}

// FilterResponseMultiError is an error wrapping multiple validation errors
// returned by FilterResponse.ValidateAll() if the designated constraints
// aren't met.
type FilterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilterResponseMultiError) AllErrors() []error { return m }

// FilterResponseValidationError is the validation error returned by
// FilterResponse.Validate if the designated constraints aren't met.
type FilterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilterResponseValidationError) ErrorName() string { return "FilterResponseValidationError" }

// Error satisfies the builtin error interface
func (e FilterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilterResponseValidationError{}

// Validate checks the field values on CreateFreelancersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateFreelancersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateFreelancersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateFreelancersRequestMultiError, or nil if none found.
func (m *CreateFreelancersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateFreelancersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetEmail()) > 255 {
		err := CreateFreelancersRequestValidationError{
			field:  "Email",
			reason: "value length must be at most 255 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = CreateFreelancersRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetLastName()); l < 1 || l > 100 {
		err := CreateFreelancersRequestValidationError{
			field:  "LastName",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetFirstName()); l < 1 || l > 100 {
		err := CreateFreelancersRequestValidationError{
			field:  "FirstName",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetMiddleName()); l < 1 || l > 100 {
		err := CreateFreelancersRequestValidationError{
			field:  "MiddleName",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetTelegramUsername()); l < 1 || l > 100 {
		err := CreateFreelancersRequestValidationError{
			field:  "TelegramUsername",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAgreePolicy() != true {
		err := CreateFreelancersRequestValidationError{
			field:  "AgreePolicy",
			reason: "value must equal true",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetExperienceWithDoctors() != true {
		err := CreateFreelancersRequestValidationError{
			field:  "ExperienceWithDoctors",
			reason: "value must equal true",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCityId() <= 0 {
		err := CreateFreelancersRequestValidationError{
			field:  "CityId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetSpecialityId() <= 0 {
		err := CreateFreelancersRequestValidationError{
			field:  "SpecialityId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_CreateFreelancersRequest_AdditionalCities_Unique := make(map[int64]struct{}, len(m.GetAdditionalCities()))

	for idx, item := range m.GetAdditionalCities() {
		_, _ = idx, item

		if _, exists := _CreateFreelancersRequest_AdditionalCities_Unique[item]; exists {
			err := CreateFreelancersRequestValidationError{
				field:  fmt.Sprintf("AdditionalCities[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_CreateFreelancersRequest_AdditionalCities_Unique[item] = struct{}{}
		}

		// no validation rules for AdditionalCities[idx]
	}

	_CreateFreelancersRequest_AdditionalSpecialties_Unique := make(map[int64]struct{}, len(m.GetAdditionalSpecialties()))

	for idx, item := range m.GetAdditionalSpecialties() {
		_, _ = idx, item

		if _, exists := _CreateFreelancersRequest_AdditionalSpecialties_Unique[item]; exists {
			err := CreateFreelancersRequestValidationError{
				field:  fmt.Sprintf("AdditionalSpecialties[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_CreateFreelancersRequest_AdditionalSpecialties_Unique[item] = struct{}{}
		}

		// no validation rules for AdditionalSpecialties[idx]
	}

	_CreateFreelancersRequest_SocialNetworks_Unique := make(map[int64]struct{}, len(m.GetSocialNetworks()))

	for idx, item := range m.GetSocialNetworks() {
		_, _ = idx, item

		if _, exists := _CreateFreelancersRequest_SocialNetworks_Unique[item]; exists {
			err := CreateFreelancersRequestValidationError{
				field:  fmt.Sprintf("SocialNetworks[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_CreateFreelancersRequest_SocialNetworks_Unique[item] = struct{}{}
		}

		// no validation rules for SocialNetworks[idx]
	}

	if utf8.RuneCountInString(m.GetPortfolioLink()) > 255 {
		err := CreateFreelancersRequestValidationError{
			field:  "PortfolioLink",
			reason: "value length must be at most 255 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetPriceList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateFreelancersRequestValidationError{
						field:  fmt.Sprintf("PriceList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateFreelancersRequestValidationError{
						field:  fmt.Sprintf("PriceList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateFreelancersRequestValidationError{
					field:  fmt.Sprintf("PriceList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateFreelancersRequestMultiError(errors)
	}

	return nil
}

func (m *CreateFreelancersRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *CreateFreelancersRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// CreateFreelancersRequestMultiError is an error wrapping multiple validation
// errors returned by CreateFreelancersRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateFreelancersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateFreelancersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateFreelancersRequestMultiError) AllErrors() []error { return m }

// CreateFreelancersRequestValidationError is the validation error returned by
// CreateFreelancersRequest.Validate if the designated constraints aren't met.
type CreateFreelancersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFreelancersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFreelancersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFreelancersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFreelancersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFreelancersRequestValidationError) ErrorName() string {
	return "CreateFreelancersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateFreelancersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFreelancersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFreelancersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFreelancersRequestValidationError{}

// Validate checks the field values on CreateFreelancersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateFreelancersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateFreelancersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateFreelancersResponseMultiError, or nil if none found.
func (m *CreateFreelancersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateFreelancersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetErrors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateFreelancersResponseValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateFreelancersResponseValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateFreelancersResponseValidationError{
					field:  fmt.Sprintf("Errors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateFreelancersResponseMultiError(errors)
	}

	return nil
}

// CreateFreelancersResponseMultiError is an error wrapping multiple validation
// errors returned by CreateFreelancersResponse.ValidateAll() if the
// designated constraints aren't met.
type CreateFreelancersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateFreelancersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateFreelancersResponseMultiError) AllErrors() []error { return m }

// CreateFreelancersResponseValidationError is the validation error returned by
// CreateFreelancersResponse.Validate if the designated constraints aren't met.
type CreateFreelancersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFreelancersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFreelancersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFreelancersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFreelancersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFreelancersResponseValidationError) ErrorName() string {
	return "CreateFreelancersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateFreelancersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFreelancersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFreelancersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFreelancersResponseValidationError{}

// Validate checks the field values on GetFreelancerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFreelancerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFreelancerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFreelancerRequestMultiError, or nil if none found.
func (m *GetFreelancerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFreelancerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FreelancerSlug

	if len(errors) > 0 {
		return GetFreelancerRequestMultiError(errors)
	}

	return nil
}

// GetFreelancerRequestMultiError is an error wrapping multiple validation
// errors returned by GetFreelancerRequest.ValidateAll() if the designated
// constraints aren't met.
type GetFreelancerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFreelancerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFreelancerRequestMultiError) AllErrors() []error { return m }

// GetFreelancerRequestValidationError is the validation error returned by
// GetFreelancerRequest.Validate if the designated constraints aren't met.
type GetFreelancerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFreelancerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFreelancerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFreelancerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFreelancerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFreelancerRequestValidationError) ErrorName() string {
	return "GetFreelancerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetFreelancerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFreelancerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFreelancerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFreelancerRequestValidationError{}

// Validate checks the field values on GetFreelancerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFreelancerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFreelancerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFreelancerResponseMultiError, or nil if none found.
func (m *GetFreelancerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFreelancerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Slug

	// no validation rules for TgUrl

	// no validation rules for ExperienceWithDoctors

	// no validation rules for PriceCategory

	// no validation rules for PortfolioLink

	// no validation rules for Image

	for idx, item := range m.GetCities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetFreelancerResponseValidationError{
						field:  fmt.Sprintf("Cities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetFreelancerResponseValidationError{
						field:  fmt.Sprintf("Cities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetFreelancerResponseValidationError{
					field:  fmt.Sprintf("Cities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetSpecialities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetFreelancerResponseValidationError{
						field:  fmt.Sprintf("Specialities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetFreelancerResponseValidationError{
						field:  fmt.Sprintf("Specialities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetFreelancerResponseValidationError{
					field:  fmt.Sprintf("Specialities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetMainCity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetFreelancerResponseValidationError{
					field:  "MainCity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetFreelancerResponseValidationError{
					field:  "MainCity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMainCity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetFreelancerResponseValidationError{
				field:  "MainCity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMainSpeciality()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetFreelancerResponseValidationError{
					field:  "MainSpeciality",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetFreelancerResponseValidationError{
					field:  "MainSpeciality",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMainSpeciality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetFreelancerResponseValidationError{
				field:  "MainSpeciality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetSocialNetworks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetFreelancerResponseValidationError{
						field:  fmt.Sprintf("SocialNetworks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetFreelancerResponseValidationError{
						field:  fmt.Sprintf("SocialNetworks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetFreelancerResponseValidationError{
					field:  fmt.Sprintf("SocialNetworks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetPriceList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetFreelancerResponseValidationError{
						field:  fmt.Sprintf("PriceList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetFreelancerResponseValidationError{
						field:  fmt.Sprintf("PriceList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetFreelancerResponseValidationError{
					field:  fmt.Sprintf("PriceList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetFreelancerResponseMultiError(errors)
	}

	return nil
}

// GetFreelancerResponseMultiError is an error wrapping multiple validation
// errors returned by GetFreelancerResponse.ValidateAll() if the designated
// constraints aren't met.
type GetFreelancerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFreelancerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFreelancerResponseMultiError) AllErrors() []error { return m }

// GetFreelancerResponseValidationError is the validation error returned by
// GetFreelancerResponse.Validate if the designated constraints aren't met.
type GetFreelancerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFreelancerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFreelancerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFreelancerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFreelancerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFreelancerResponseValidationError) ErrorName() string {
	return "GetFreelancerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetFreelancerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFreelancerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFreelancerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFreelancerResponseValidationError{}

// Validate checks the field values on GetSocialNetworksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSocialNetworksRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSocialNetworksRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSocialNetworksRequestMultiError, or nil if none found.
func (m *GetSocialNetworksRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSocialNetworksRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetSocialNetworksRequestMultiError(errors)
	}

	return nil
}

// GetSocialNetworksRequestMultiError is an error wrapping multiple validation
// errors returned by GetSocialNetworksRequest.ValidateAll() if the designated
// constraints aren't met.
type GetSocialNetworksRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSocialNetworksRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSocialNetworksRequestMultiError) AllErrors() []error { return m }

// GetSocialNetworksRequestValidationError is the validation error returned by
// GetSocialNetworksRequest.Validate if the designated constraints aren't met.
type GetSocialNetworksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSocialNetworksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSocialNetworksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSocialNetworksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSocialNetworksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSocialNetworksRequestValidationError) ErrorName() string {
	return "GetSocialNetworksRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSocialNetworksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSocialNetworksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSocialNetworksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSocialNetworksRequestValidationError{}

// Validate checks the field values on GetSocialNetworksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSocialNetworksResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSocialNetworksResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSocialNetworksResponseMultiError, or nil if none found.
func (m *GetSocialNetworksResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSocialNetworksResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSocialNetworks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSocialNetworksResponseValidationError{
						field:  fmt.Sprintf("SocialNetworks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSocialNetworksResponseValidationError{
						field:  fmt.Sprintf("SocialNetworks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSocialNetworksResponseValidationError{
					field:  fmt.Sprintf("SocialNetworks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetSocialNetworksResponseMultiError(errors)
	}

	return nil
}

// GetSocialNetworksResponseMultiError is an error wrapping multiple validation
// errors returned by GetSocialNetworksResponse.ValidateAll() if the
// designated constraints aren't met.
type GetSocialNetworksResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSocialNetworksResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSocialNetworksResponseMultiError) AllErrors() []error { return m }

// GetSocialNetworksResponseValidationError is the validation error returned by
// GetSocialNetworksResponse.Validate if the designated constraints aren't met.
type GetSocialNetworksResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSocialNetworksResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSocialNetworksResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSocialNetworksResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSocialNetworksResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSocialNetworksResponseValidationError) ErrorName() string {
	return "GetSocialNetworksResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSocialNetworksResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSocialNetworksResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSocialNetworksResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSocialNetworksResponseValidationError{}

// Validate checks the field values on GetSettingsResponse_SocietyItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSettingsResponse_SocietyItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSettingsResponse_SocietyItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetSettingsResponse_SocietyItemMultiError, or nil if none found.
func (m *GetSettingsResponse_SocietyItem) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSettingsResponse_SocietyItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for FreelancersCount

	if len(errors) > 0 {
		return GetSettingsResponse_SocietyItemMultiError(errors)
	}

	return nil
}

// GetSettingsResponse_SocietyItemMultiError is an error wrapping multiple
// validation errors returned by GetSettingsResponse_SocietyItem.ValidateAll()
// if the designated constraints aren't met.
type GetSettingsResponse_SocietyItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSettingsResponse_SocietyItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSettingsResponse_SocietyItemMultiError) AllErrors() []error { return m }

// GetSettingsResponse_SocietyItemValidationError is the validation error
// returned by GetSettingsResponse_SocietyItem.Validate if the designated
// constraints aren't met.
type GetSettingsResponse_SocietyItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSettingsResponse_SocietyItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSettingsResponse_SocietyItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSettingsResponse_SocietyItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSettingsResponse_SocietyItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSettingsResponse_SocietyItemValidationError) ErrorName() string {
	return "GetSettingsResponse_SocietyItemValidationError"
}

// Error satisfies the builtin error interface
func (e GetSettingsResponse_SocietyItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSettingsResponse_SocietyItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSettingsResponse_SocietyItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSettingsResponse_SocietyItemValidationError{}

// Validate checks the field values on GetSettingsResponse_CityItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSettingsResponse_CityItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSettingsResponse_CityItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSettingsResponse_CityItemMultiError, or nil if none found.
func (m *GetSettingsResponse_CityItem) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSettingsResponse_CityItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for FreelancersCount

	if len(errors) > 0 {
		return GetSettingsResponse_CityItemMultiError(errors)
	}

	return nil
}

// GetSettingsResponse_CityItemMultiError is an error wrapping multiple
// validation errors returned by GetSettingsResponse_CityItem.ValidateAll() if
// the designated constraints aren't met.
type GetSettingsResponse_CityItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSettingsResponse_CityItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSettingsResponse_CityItemMultiError) AllErrors() []error { return m }

// GetSettingsResponse_CityItemValidationError is the validation error returned
// by GetSettingsResponse_CityItem.Validate if the designated constraints
// aren't met.
type GetSettingsResponse_CityItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSettingsResponse_CityItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSettingsResponse_CityItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSettingsResponse_CityItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSettingsResponse_CityItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSettingsResponse_CityItemValidationError) ErrorName() string {
	return "GetSettingsResponse_CityItemValidationError"
}

// Error satisfies the builtin error interface
func (e GetSettingsResponse_CityItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSettingsResponse_CityItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSettingsResponse_CityItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSettingsResponse_CityItemValidationError{}

// Validate checks the field values on GetSettingsResponse_SpecialityItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetSettingsResponse_SpecialityItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSettingsResponse_SpecialityItem
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetSettingsResponse_SpecialityItemMultiError, or nil if none found.
func (m *GetSettingsResponse_SpecialityItem) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSettingsResponse_SpecialityItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for FreelancersCount

	if len(errors) > 0 {
		return GetSettingsResponse_SpecialityItemMultiError(errors)
	}

	return nil
}

// GetSettingsResponse_SpecialityItemMultiError is an error wrapping multiple
// validation errors returned by
// GetSettingsResponse_SpecialityItem.ValidateAll() if the designated
// constraints aren't met.
type GetSettingsResponse_SpecialityItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSettingsResponse_SpecialityItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSettingsResponse_SpecialityItemMultiError) AllErrors() []error { return m }

// GetSettingsResponse_SpecialityItemValidationError is the validation error
// returned by GetSettingsResponse_SpecialityItem.Validate if the designated
// constraints aren't met.
type GetSettingsResponse_SpecialityItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSettingsResponse_SpecialityItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSettingsResponse_SpecialityItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSettingsResponse_SpecialityItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSettingsResponse_SpecialityItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSettingsResponse_SpecialityItemValidationError) ErrorName() string {
	return "GetSettingsResponse_SpecialityItemValidationError"
}

// Error satisfies the builtin error interface
func (e GetSettingsResponse_SpecialityItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSettingsResponse_SpecialityItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSettingsResponse_SpecialityItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSettingsResponse_SpecialityItemValidationError{}

// Validate checks the field values on GetSettingsResponse_PriceCategoryItem
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetSettingsResponse_PriceCategoryItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSettingsResponse_PriceCategoryItem
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetSettingsResponse_PriceCategoryItemMultiError, or nil if none found.
func (m *GetSettingsResponse_PriceCategoryItem) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSettingsResponse_PriceCategoryItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for FreelancersCount

	if len(errors) > 0 {
		return GetSettingsResponse_PriceCategoryItemMultiError(errors)
	}

	return nil
}

// GetSettingsResponse_PriceCategoryItemMultiError is an error wrapping
// multiple validation errors returned by
// GetSettingsResponse_PriceCategoryItem.ValidateAll() if the designated
// constraints aren't met.
type GetSettingsResponse_PriceCategoryItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSettingsResponse_PriceCategoryItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSettingsResponse_PriceCategoryItemMultiError) AllErrors() []error { return m }

// GetSettingsResponse_PriceCategoryItemValidationError is the validation error
// returned by GetSettingsResponse_PriceCategoryItem.Validate if the
// designated constraints aren't met.
type GetSettingsResponse_PriceCategoryItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSettingsResponse_PriceCategoryItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSettingsResponse_PriceCategoryItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSettingsResponse_PriceCategoryItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSettingsResponse_PriceCategoryItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSettingsResponse_PriceCategoryItemValidationError) ErrorName() string {
	return "GetSettingsResponse_PriceCategoryItemValidationError"
}

// Error satisfies the builtin error interface
func (e GetSettingsResponse_PriceCategoryItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSettingsResponse_PriceCategoryItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSettingsResponse_PriceCategoryItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSettingsResponse_PriceCategoryItemValidationError{}

// Validate checks the field values on CitiesResponse_CityItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CitiesResponse_CityItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CitiesResponse_CityItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CitiesResponse_CityItemMultiError, or nil if none found.
func (m *CitiesResponse_CityItem) ValidateAll() error {
	return m.validate(true)
}

func (m *CitiesResponse_CityItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CityId

	// no validation rules for CityName

	if len(errors) > 0 {
		return CitiesResponse_CityItemMultiError(errors)
	}

	return nil
}

// CitiesResponse_CityItemMultiError is an error wrapping multiple validation
// errors returned by CitiesResponse_CityItem.ValidateAll() if the designated
// constraints aren't met.
type CitiesResponse_CityItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CitiesResponse_CityItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CitiesResponse_CityItemMultiError) AllErrors() []error { return m }

// CitiesResponse_CityItemValidationError is the validation error returned by
// CitiesResponse_CityItem.Validate if the designated constraints aren't met.
type CitiesResponse_CityItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CitiesResponse_CityItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CitiesResponse_CityItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CitiesResponse_CityItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CitiesResponse_CityItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CitiesResponse_CityItemValidationError) ErrorName() string {
	return "CitiesResponse_CityItemValidationError"
}

// Error satisfies the builtin error interface
func (e CitiesResponse_CityItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCitiesResponse_CityItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CitiesResponse_CityItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CitiesResponse_CityItemValidationError{}

// Validate checks the field values on SpecialitiesResponse_SpecialityItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SpecialitiesResponse_SpecialityItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpecialitiesResponse_SpecialityItem
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SpecialitiesResponse_SpecialityItemMultiError, or nil if none found.
func (m *SpecialitiesResponse_SpecialityItem) ValidateAll() error {
	return m.validate(true)
}

func (m *SpecialitiesResponse_SpecialityItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SpecialityId

	// no validation rules for SpecialityName

	if len(errors) > 0 {
		return SpecialitiesResponse_SpecialityItemMultiError(errors)
	}

	return nil
}

// SpecialitiesResponse_SpecialityItemMultiError is an error wrapping multiple
// validation errors returned by
// SpecialitiesResponse_SpecialityItem.ValidateAll() if the designated
// constraints aren't met.
type SpecialitiesResponse_SpecialityItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpecialitiesResponse_SpecialityItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpecialitiesResponse_SpecialityItemMultiError) AllErrors() []error { return m }

// SpecialitiesResponse_SpecialityItemValidationError is the validation error
// returned by SpecialitiesResponse_SpecialityItem.Validate if the designated
// constraints aren't met.
type SpecialitiesResponse_SpecialityItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpecialitiesResponse_SpecialityItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpecialitiesResponse_SpecialityItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpecialitiesResponse_SpecialityItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpecialitiesResponse_SpecialityItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpecialitiesResponse_SpecialityItemValidationError) ErrorName() string {
	return "SpecialitiesResponse_SpecialityItemValidationError"
}

// Error satisfies the builtin error interface
func (e SpecialitiesResponse_SpecialityItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpecialitiesResponse_SpecialityItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpecialitiesResponse_SpecialityItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpecialitiesResponse_SpecialityItemValidationError{}

// Validate checks the field values on SearchResponse_FreelancerItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchResponse_FreelancerItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchResponse_FreelancerItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SearchResponse_FreelancerItemMultiError, or nil if none found.
func (m *SearchResponse_FreelancerItem) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchResponse_FreelancerItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Slug

	// no validation rules for CityName

	// no validation rules for SpecialityName

	// no validation rules for Image

	// no validation rules for ExperienceWithDoctors

	// no validation rules for PriceCategory

	for idx, item := range m.GetSocialNetworks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchResponse_FreelancerItemValidationError{
						field:  fmt.Sprintf("SocialNetworks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchResponse_FreelancerItemValidationError{
						field:  fmt.Sprintf("SocialNetworks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchResponse_FreelancerItemValidationError{
					field:  fmt.Sprintf("SocialNetworks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchResponse_FreelancerItemMultiError(errors)
	}

	return nil
}

// SearchResponse_FreelancerItemMultiError is an error wrapping multiple
// validation errors returned by SearchResponse_FreelancerItem.ValidateAll()
// if the designated constraints aren't met.
type SearchResponse_FreelancerItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchResponse_FreelancerItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchResponse_FreelancerItemMultiError) AllErrors() []error { return m }

// SearchResponse_FreelancerItemValidationError is the validation error
// returned by SearchResponse_FreelancerItem.Validate if the designated
// constraints aren't met.
type SearchResponse_FreelancerItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchResponse_FreelancerItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchResponse_FreelancerItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchResponse_FreelancerItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchResponse_FreelancerItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchResponse_FreelancerItemValidationError) ErrorName() string {
	return "SearchResponse_FreelancerItemValidationError"
}

// Error satisfies the builtin error interface
func (e SearchResponse_FreelancerItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchResponse_FreelancerItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchResponse_FreelancerItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchResponse_FreelancerItemValidationError{}

// Validate checks the field values on SearchResponse_CityItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchResponse_CityItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchResponse_CityItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchResponse_CityItemMultiError, or nil if none found.
func (m *SearchResponse_CityItem) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchResponse_CityItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for FreelancersCount

	if len(errors) > 0 {
		return SearchResponse_CityItemMultiError(errors)
	}

	return nil
}

// SearchResponse_CityItemMultiError is an error wrapping multiple validation
// errors returned by SearchResponse_CityItem.ValidateAll() if the designated
// constraints aren't met.
type SearchResponse_CityItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchResponse_CityItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchResponse_CityItemMultiError) AllErrors() []error { return m }

// SearchResponse_CityItemValidationError is the validation error returned by
// SearchResponse_CityItem.Validate if the designated constraints aren't met.
type SearchResponse_CityItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchResponse_CityItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchResponse_CityItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchResponse_CityItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchResponse_CityItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchResponse_CityItemValidationError) ErrorName() string {
	return "SearchResponse_CityItemValidationError"
}

// Error satisfies the builtin error interface
func (e SearchResponse_CityItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchResponse_CityItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchResponse_CityItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchResponse_CityItemValidationError{}

// Validate checks the field values on SearchResponse_SpecialityItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchResponse_SpecialityItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchResponse_SpecialityItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SearchResponse_SpecialityItemMultiError, or nil if none found.
func (m *SearchResponse_SpecialityItem) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchResponse_SpecialityItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for FreelancersCount

	if len(errors) > 0 {
		return SearchResponse_SpecialityItemMultiError(errors)
	}

	return nil
}

// SearchResponse_SpecialityItemMultiError is an error wrapping multiple
// validation errors returned by SearchResponse_SpecialityItem.ValidateAll()
// if the designated constraints aren't met.
type SearchResponse_SpecialityItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchResponse_SpecialityItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchResponse_SpecialityItemMultiError) AllErrors() []error { return m }

// SearchResponse_SpecialityItemValidationError is the validation error
// returned by SearchResponse_SpecialityItem.Validate if the designated
// constraints aren't met.
type SearchResponse_SpecialityItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchResponse_SpecialityItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchResponse_SpecialityItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchResponse_SpecialityItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchResponse_SpecialityItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchResponse_SpecialityItemValidationError) ErrorName() string {
	return "SearchResponse_SpecialityItemValidationError"
}

// Error satisfies the builtin error interface
func (e SearchResponse_SpecialityItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchResponse_SpecialityItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchResponse_SpecialityItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchResponse_SpecialityItemValidationError{}

// Validate checks the field values on
// SearchResponse_FreelancerItem_SocialNetworkItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SearchResponse_FreelancerItem_SocialNetworkItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SearchResponse_FreelancerItem_SocialNetworkItem with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// SearchResponse_FreelancerItem_SocialNetworkItemMultiError, or nil if none found.
func (m *SearchResponse_FreelancerItem_SocialNetworkItem) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchResponse_FreelancerItem_SocialNetworkItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return SearchResponse_FreelancerItem_SocialNetworkItemMultiError(errors)
	}

	return nil
}

// SearchResponse_FreelancerItem_SocialNetworkItemMultiError is an error
// wrapping multiple validation errors returned by
// SearchResponse_FreelancerItem_SocialNetworkItem.ValidateAll() if the
// designated constraints aren't met.
type SearchResponse_FreelancerItem_SocialNetworkItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchResponse_FreelancerItem_SocialNetworkItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchResponse_FreelancerItem_SocialNetworkItemMultiError) AllErrors() []error { return m }

// SearchResponse_FreelancerItem_SocialNetworkItemValidationError is the
// validation error returned by
// SearchResponse_FreelancerItem_SocialNetworkItem.Validate if the designated
// constraints aren't met.
type SearchResponse_FreelancerItem_SocialNetworkItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchResponse_FreelancerItem_SocialNetworkItemValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e SearchResponse_FreelancerItem_SocialNetworkItemValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e SearchResponse_FreelancerItem_SocialNetworkItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchResponse_FreelancerItem_SocialNetworkItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchResponse_FreelancerItem_SocialNetworkItemValidationError) ErrorName() string {
	return "SearchResponse_FreelancerItem_SocialNetworkItemValidationError"
}

// Error satisfies the builtin error interface
func (e SearchResponse_FreelancerItem_SocialNetworkItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchResponse_FreelancerItem_SocialNetworkItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchResponse_FreelancerItem_SocialNetworkItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchResponse_FreelancerItem_SocialNetworkItemValidationError{}

// Validate checks the field values on FilterResponse_FreelancerItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FilterResponse_FreelancerItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilterResponse_FreelancerItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// FilterResponse_FreelancerItemMultiError, or nil if none found.
func (m *FilterResponse_FreelancerItem) ValidateAll() error {
	return m.validate(true)
}

func (m *FilterResponse_FreelancerItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Slug

	// no validation rules for Speciality

	// no validation rules for City

	// no validation rules for Image

	// no validation rules for ExperienceWithDoctors

	// no validation rules for PriceCategory

	for idx, item := range m.GetSocialNetworks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FilterResponse_FreelancerItemValidationError{
						field:  fmt.Sprintf("SocialNetworks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FilterResponse_FreelancerItemValidationError{
						field:  fmt.Sprintf("SocialNetworks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FilterResponse_FreelancerItemValidationError{
					field:  fmt.Sprintf("SocialNetworks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FilterResponse_FreelancerItemMultiError(errors)
	}

	return nil
}

// FilterResponse_FreelancerItemMultiError is an error wrapping multiple
// validation errors returned by FilterResponse_FreelancerItem.ValidateAll()
// if the designated constraints aren't met.
type FilterResponse_FreelancerItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilterResponse_FreelancerItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilterResponse_FreelancerItemMultiError) AllErrors() []error { return m }

// FilterResponse_FreelancerItemValidationError is the validation error
// returned by FilterResponse_FreelancerItem.Validate if the designated
// constraints aren't met.
type FilterResponse_FreelancerItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilterResponse_FreelancerItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilterResponse_FreelancerItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilterResponse_FreelancerItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilterResponse_FreelancerItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilterResponse_FreelancerItemValidationError) ErrorName() string {
	return "FilterResponse_FreelancerItemValidationError"
}

// Error satisfies the builtin error interface
func (e FilterResponse_FreelancerItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilterResponse_FreelancerItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilterResponse_FreelancerItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilterResponse_FreelancerItemValidationError{}

// Validate checks the field values on
// FilterResponse_FreelancerItem_SocialNetworkItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FilterResponse_FreelancerItem_SocialNetworkItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// FilterResponse_FreelancerItem_SocialNetworkItem with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// FilterResponse_FreelancerItem_SocialNetworkItemMultiError, or nil if none found.
func (m *FilterResponse_FreelancerItem_SocialNetworkItem) ValidateAll() error {
	return m.validate(true)
}

func (m *FilterResponse_FreelancerItem_SocialNetworkItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return FilterResponse_FreelancerItem_SocialNetworkItemMultiError(errors)
	}

	return nil
}

// FilterResponse_FreelancerItem_SocialNetworkItemMultiError is an error
// wrapping multiple validation errors returned by
// FilterResponse_FreelancerItem_SocialNetworkItem.ValidateAll() if the
// designated constraints aren't met.
type FilterResponse_FreelancerItem_SocialNetworkItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilterResponse_FreelancerItem_SocialNetworkItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilterResponse_FreelancerItem_SocialNetworkItemMultiError) AllErrors() []error { return m }

// FilterResponse_FreelancerItem_SocialNetworkItemValidationError is the
// validation error returned by
// FilterResponse_FreelancerItem_SocialNetworkItem.Validate if the designated
// constraints aren't met.
type FilterResponse_FreelancerItem_SocialNetworkItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilterResponse_FreelancerItem_SocialNetworkItemValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e FilterResponse_FreelancerItem_SocialNetworkItemValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e FilterResponse_FreelancerItem_SocialNetworkItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilterResponse_FreelancerItem_SocialNetworkItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilterResponse_FreelancerItem_SocialNetworkItemValidationError) ErrorName() string {
	return "FilterResponse_FreelancerItem_SocialNetworkItemValidationError"
}

// Error satisfies the builtin error interface
func (e FilterResponse_FreelancerItem_SocialNetworkItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilterResponse_FreelancerItem_SocialNetworkItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilterResponse_FreelancerItem_SocialNetworkItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilterResponse_FreelancerItem_SocialNetworkItemValidationError{}

// Validate checks the field values on CreateFreelancersRequest_PriceListItem
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateFreelancersRequest_PriceListItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateFreelancersRequest_PriceListItem with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// CreateFreelancersRequest_PriceListItemMultiError, or nil if none found.
func (m *CreateFreelancersRequest_PriceListItem) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateFreelancersRequest_PriceListItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Amount

	if len(errors) > 0 {
		return CreateFreelancersRequest_PriceListItemMultiError(errors)
	}

	return nil
}

// CreateFreelancersRequest_PriceListItemMultiError is an error wrapping
// multiple validation errors returned by
// CreateFreelancersRequest_PriceListItem.ValidateAll() if the designated
// constraints aren't met.
type CreateFreelancersRequest_PriceListItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateFreelancersRequest_PriceListItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateFreelancersRequest_PriceListItemMultiError) AllErrors() []error { return m }

// CreateFreelancersRequest_PriceListItemValidationError is the validation
// error returned by CreateFreelancersRequest_PriceListItem.Validate if the
// designated constraints aren't met.
type CreateFreelancersRequest_PriceListItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFreelancersRequest_PriceListItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFreelancersRequest_PriceListItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFreelancersRequest_PriceListItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFreelancersRequest_PriceListItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFreelancersRequest_PriceListItemValidationError) ErrorName() string {
	return "CreateFreelancersRequest_PriceListItemValidationError"
}

// Error satisfies the builtin error interface
func (e CreateFreelancersRequest_PriceListItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFreelancersRequest_PriceListItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFreelancersRequest_PriceListItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFreelancersRequest_PriceListItemValidationError{}

// Validate checks the field values on
// CreateFreelancersResponse_ValidationError with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateFreelancersResponse_ValidationError) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateFreelancersResponse_ValidationError with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CreateFreelancersResponse_ValidationErrorMultiError, or nil if none found.
func (m *CreateFreelancersResponse_ValidationError) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateFreelancersResponse_ValidationError) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Field

	// no validation rules for Text

	if len(errors) > 0 {
		return CreateFreelancersResponse_ValidationErrorMultiError(errors)
	}

	return nil
}

// CreateFreelancersResponse_ValidationErrorMultiError is an error wrapping
// multiple validation errors returned by
// CreateFreelancersResponse_ValidationError.ValidateAll() if the designated
// constraints aren't met.
type CreateFreelancersResponse_ValidationErrorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateFreelancersResponse_ValidationErrorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateFreelancersResponse_ValidationErrorMultiError) AllErrors() []error { return m }

// CreateFreelancersResponse_ValidationErrorValidationError is the validation
// error returned by CreateFreelancersResponse_ValidationError.Validate if the
// designated constraints aren't met.
type CreateFreelancersResponse_ValidationErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFreelancersResponse_ValidationErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFreelancersResponse_ValidationErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFreelancersResponse_ValidationErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFreelancersResponse_ValidationErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFreelancersResponse_ValidationErrorValidationError) ErrorName() string {
	return "CreateFreelancersResponse_ValidationErrorValidationError"
}

// Error satisfies the builtin error interface
func (e CreateFreelancersResponse_ValidationErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFreelancersResponse_ValidationError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFreelancersResponse_ValidationErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFreelancersResponse_ValidationErrorValidationError{}

// Validate checks the field values on GetFreelancerResponse_CityItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFreelancerResponse_CityItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFreelancerResponse_CityItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetFreelancerResponse_CityItemMultiError, or nil if none found.
func (m *GetFreelancerResponse_CityItem) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFreelancerResponse_CityItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return GetFreelancerResponse_CityItemMultiError(errors)
	}

	return nil
}

// GetFreelancerResponse_CityItemMultiError is an error wrapping multiple
// validation errors returned by GetFreelancerResponse_CityItem.ValidateAll()
// if the designated constraints aren't met.
type GetFreelancerResponse_CityItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFreelancerResponse_CityItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFreelancerResponse_CityItemMultiError) AllErrors() []error { return m }

// GetFreelancerResponse_CityItemValidationError is the validation error
// returned by GetFreelancerResponse_CityItem.Validate if the designated
// constraints aren't met.
type GetFreelancerResponse_CityItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFreelancerResponse_CityItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFreelancerResponse_CityItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFreelancerResponse_CityItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFreelancerResponse_CityItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFreelancerResponse_CityItemValidationError) ErrorName() string {
	return "GetFreelancerResponse_CityItemValidationError"
}

// Error satisfies the builtin error interface
func (e GetFreelancerResponse_CityItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFreelancerResponse_CityItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFreelancerResponse_CityItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFreelancerResponse_CityItemValidationError{}

// Validate checks the field values on GetFreelancerResponse_SpecialityItem
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetFreelancerResponse_SpecialityItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFreelancerResponse_SpecialityItem
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetFreelancerResponse_SpecialityItemMultiError, or nil if none found.
func (m *GetFreelancerResponse_SpecialityItem) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFreelancerResponse_SpecialityItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return GetFreelancerResponse_SpecialityItemMultiError(errors)
	}

	return nil
}

// GetFreelancerResponse_SpecialityItemMultiError is an error wrapping multiple
// validation errors returned by
// GetFreelancerResponse_SpecialityItem.ValidateAll() if the designated
// constraints aren't met.
type GetFreelancerResponse_SpecialityItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFreelancerResponse_SpecialityItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFreelancerResponse_SpecialityItemMultiError) AllErrors() []error { return m }

// GetFreelancerResponse_SpecialityItemValidationError is the validation error
// returned by GetFreelancerResponse_SpecialityItem.Validate if the designated
// constraints aren't met.
type GetFreelancerResponse_SpecialityItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFreelancerResponse_SpecialityItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFreelancerResponse_SpecialityItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFreelancerResponse_SpecialityItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFreelancerResponse_SpecialityItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFreelancerResponse_SpecialityItemValidationError) ErrorName() string {
	return "GetFreelancerResponse_SpecialityItemValidationError"
}

// Error satisfies the builtin error interface
func (e GetFreelancerResponse_SpecialityItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFreelancerResponse_SpecialityItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFreelancerResponse_SpecialityItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFreelancerResponse_SpecialityItemValidationError{}

// Validate checks the field values on GetFreelancerResponse_SocialNetworkItem
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetFreelancerResponse_SocialNetworkItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetFreelancerResponse_SocialNetworkItem with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// GetFreelancerResponse_SocialNetworkItemMultiError, or nil if none found.
func (m *GetFreelancerResponse_SocialNetworkItem) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFreelancerResponse_SocialNetworkItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return GetFreelancerResponse_SocialNetworkItemMultiError(errors)
	}

	return nil
}

// GetFreelancerResponse_SocialNetworkItemMultiError is an error wrapping
// multiple validation errors returned by
// GetFreelancerResponse_SocialNetworkItem.ValidateAll() if the designated
// constraints aren't met.
type GetFreelancerResponse_SocialNetworkItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFreelancerResponse_SocialNetworkItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFreelancerResponse_SocialNetworkItemMultiError) AllErrors() []error { return m }

// GetFreelancerResponse_SocialNetworkItemValidationError is the validation
// error returned by GetFreelancerResponse_SocialNetworkItem.Validate if the
// designated constraints aren't met.
type GetFreelancerResponse_SocialNetworkItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFreelancerResponse_SocialNetworkItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFreelancerResponse_SocialNetworkItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFreelancerResponse_SocialNetworkItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFreelancerResponse_SocialNetworkItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFreelancerResponse_SocialNetworkItemValidationError) ErrorName() string {
	return "GetFreelancerResponse_SocialNetworkItemValidationError"
}

// Error satisfies the builtin error interface
func (e GetFreelancerResponse_SocialNetworkItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFreelancerResponse_SocialNetworkItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFreelancerResponse_SocialNetworkItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFreelancerResponse_SocialNetworkItemValidationError{}

// Validate checks the field values on GetFreelancerResponse_PriceListItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetFreelancerResponse_PriceListItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFreelancerResponse_PriceListItem
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetFreelancerResponse_PriceListItemMultiError, or nil if none found.
func (m *GetFreelancerResponse_PriceListItem) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFreelancerResponse_PriceListItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Amount

	if len(errors) > 0 {
		return GetFreelancerResponse_PriceListItemMultiError(errors)
	}

	return nil
}

// GetFreelancerResponse_PriceListItemMultiError is an error wrapping multiple
// validation errors returned by
// GetFreelancerResponse_PriceListItem.ValidateAll() if the designated
// constraints aren't met.
type GetFreelancerResponse_PriceListItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFreelancerResponse_PriceListItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFreelancerResponse_PriceListItemMultiError) AllErrors() []error { return m }

// GetFreelancerResponse_PriceListItemValidationError is the validation error
// returned by GetFreelancerResponse_PriceListItem.Validate if the designated
// constraints aren't met.
type GetFreelancerResponse_PriceListItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFreelancerResponse_PriceListItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFreelancerResponse_PriceListItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFreelancerResponse_PriceListItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFreelancerResponse_PriceListItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFreelancerResponse_PriceListItemValidationError) ErrorName() string {
	return "GetFreelancerResponse_PriceListItemValidationError"
}

// Error satisfies the builtin error interface
func (e GetFreelancerResponse_PriceListItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFreelancerResponse_PriceListItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFreelancerResponse_PriceListItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFreelancerResponse_PriceListItemValidationError{}

// Validate checks the field values on
// GetSocialNetworksResponse_SocialNetworkItem with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetSocialNetworksResponse_SocialNetworkItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetSocialNetworksResponse_SocialNetworkItem with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetSocialNetworksResponse_SocialNetworkItemMultiError, or nil if none found.
func (m *GetSocialNetworksResponse_SocialNetworkItem) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSocialNetworksResponse_SocialNetworkItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return GetSocialNetworksResponse_SocialNetworkItemMultiError(errors)
	}

	return nil
}

// GetSocialNetworksResponse_SocialNetworkItemMultiError is an error wrapping
// multiple validation errors returned by
// GetSocialNetworksResponse_SocialNetworkItem.ValidateAll() if the designated
// constraints aren't met.
type GetSocialNetworksResponse_SocialNetworkItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSocialNetworksResponse_SocialNetworkItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSocialNetworksResponse_SocialNetworkItemMultiError) AllErrors() []error { return m }

// GetSocialNetworksResponse_SocialNetworkItemValidationError is the validation
// error returned by GetSocialNetworksResponse_SocialNetworkItem.Validate if
// the designated constraints aren't met.
type GetSocialNetworksResponse_SocialNetworkItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSocialNetworksResponse_SocialNetworkItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSocialNetworksResponse_SocialNetworkItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSocialNetworksResponse_SocialNetworkItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSocialNetworksResponse_SocialNetworkItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSocialNetworksResponse_SocialNetworkItemValidationError) ErrorName() string {
	return "GetSocialNetworksResponse_SocialNetworkItemValidationError"
}

// Error satisfies the builtin error interface
func (e GetSocialNetworksResponse_SocialNetworkItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSocialNetworksResponse_SocialNetworkItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSocialNetworksResponse_SocialNetworkItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSocialNetworksResponse_SocialNetworkItemValidationError{}
