// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: freelancers/v1/freelancers.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetFreelancersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFreelancersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFreelancersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFreelancersRequestMultiError, or nil if none found.
func (m *GetFreelancersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFreelancersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetFreelancersRequestMultiError(errors)
	}

	return nil
}

// GetFreelancersRequestMultiError is an error wrapping multiple validation
// errors returned by GetFreelancersRequest.ValidateAll() if the designated
// constraints aren't met.
type GetFreelancersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFreelancersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFreelancersRequestMultiError) AllErrors() []error { return m }

// GetFreelancersRequestValidationError is the validation error returned by
// GetFreelancersRequest.Validate if the designated constraints aren't met.
type GetFreelancersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFreelancersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFreelancersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFreelancersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFreelancersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFreelancersRequestValidationError) ErrorName() string {
	return "GetFreelancersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetFreelancersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFreelancersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFreelancersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFreelancersRequestValidationError{}

// Validate checks the field values on GetFreelancersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFreelancersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFreelancersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFreelancersResponseMultiError, or nil if none found.
func (m *GetFreelancersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFreelancersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetFreelancersResponseMultiError(errors)
	}

	return nil
}

// GetFreelancersResponseMultiError is an error wrapping multiple validation
// errors returned by GetFreelancersResponse.ValidateAll() if the designated
// constraints aren't met.
type GetFreelancersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFreelancersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFreelancersResponseMultiError) AllErrors() []error { return m }

// GetFreelancersResponseValidationError is the validation error returned by
// GetFreelancersResponse.Validate if the designated constraints aren't met.
type GetFreelancersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFreelancersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFreelancersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFreelancersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFreelancersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFreelancersResponseValidationError) ErrorName() string {
	return "GetFreelancersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetFreelancersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFreelancersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFreelancersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFreelancersResponseValidationError{}

// Validate checks the field values on GetSettingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSettingsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSettingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSettingsRequestMultiError, or nil if none found.
func (m *GetSettingsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSettingsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetSettingsRequestMultiError(errors)
	}

	return nil
}

// GetSettingsRequestMultiError is an error wrapping multiple validation errors
// returned by GetSettingsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetSettingsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSettingsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSettingsRequestMultiError) AllErrors() []error { return m }

// GetSettingsRequestValidationError is the validation error returned by
// GetSettingsRequest.Validate if the designated constraints aren't met.
type GetSettingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSettingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSettingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSettingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSettingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSettingsRequestValidationError) ErrorName() string {
	return "GetSettingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSettingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSettingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSettingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSettingsRequestValidationError{}

// Validate checks the field values on GetSettingsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSettingsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSettingsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSettingsResponseMultiError, or nil if none found.
func (m *GetSettingsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSettingsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetSettingsResponseMultiError(errors)
	}

	return nil
}

// GetSettingsResponseMultiError is an error wrapping multiple validation
// errors returned by GetSettingsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetSettingsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSettingsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSettingsResponseMultiError) AllErrors() []error { return m }

// GetSettingsResponseValidationError is the validation error returned by
// GetSettingsResponse.Validate if the designated constraints aren't met.
type GetSettingsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSettingsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSettingsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSettingsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSettingsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSettingsResponseValidationError) ErrorName() string {
	return "GetSettingsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSettingsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSettingsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSettingsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSettingsResponseValidationError{}

// Validate checks the field values on GetCountersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCountersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCountersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCountersRequestMultiError, or nil if none found.
func (m *GetCountersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCountersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetCountersRequestMultiError(errors)
	}

	return nil
}

// GetCountersRequestMultiError is an error wrapping multiple validation errors
// returned by GetCountersRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCountersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCountersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCountersRequestMultiError) AllErrors() []error { return m }

// GetCountersRequestValidationError is the validation error returned by
// GetCountersRequest.Validate if the designated constraints aren't met.
type GetCountersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCountersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCountersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCountersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCountersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCountersRequestValidationError) ErrorName() string {
	return "GetCountersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCountersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCountersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCountersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCountersRequestValidationError{}

// Validate checks the field values on GetCountersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCountersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCountersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCountersResponseMultiError, or nil if none found.
func (m *GetCountersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCountersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetCountersResponseMultiError(errors)
	}

	return nil
}

// GetCountersResponseMultiError is an error wrapping multiple validation
// errors returned by GetCountersResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCountersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCountersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCountersResponseMultiError) AllErrors() []error { return m }

// GetCountersResponseValidationError is the validation error returned by
// GetCountersResponse.Validate if the designated constraints aren't met.
type GetCountersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCountersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCountersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCountersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCountersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCountersResponseValidationError) ErrorName() string {
	return "GetCountersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCountersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCountersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCountersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCountersResponseValidationError{}

// Validate checks the field values on PreliminaryFilterCountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PreliminaryFilterCountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PreliminaryFilterCountRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PreliminaryFilterCountRequestMultiError, or nil if none found.
func (m *PreliminaryFilterCountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PreliminaryFilterCountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PreliminaryFilterCountRequestMultiError(errors)
	}

	return nil
}

// PreliminaryFilterCountRequestMultiError is an error wrapping multiple
// validation errors returned by PreliminaryFilterCountRequest.ValidateAll()
// if the designated constraints aren't met.
type PreliminaryFilterCountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PreliminaryFilterCountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PreliminaryFilterCountRequestMultiError) AllErrors() []error { return m }

// PreliminaryFilterCountRequestValidationError is the validation error
// returned by PreliminaryFilterCountRequest.Validate if the designated
// constraints aren't met.
type PreliminaryFilterCountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PreliminaryFilterCountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PreliminaryFilterCountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PreliminaryFilterCountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PreliminaryFilterCountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PreliminaryFilterCountRequestValidationError) ErrorName() string {
	return "PreliminaryFilterCountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PreliminaryFilterCountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPreliminaryFilterCountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PreliminaryFilterCountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PreliminaryFilterCountRequestValidationError{}

// Validate checks the field values on PreliminaryFilterCountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PreliminaryFilterCountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PreliminaryFilterCountResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PreliminaryFilterCountResponseMultiError, or nil if none found.
func (m *PreliminaryFilterCountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PreliminaryFilterCountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PreliminaryFilterCountResponseMultiError(errors)
	}

	return nil
}

// PreliminaryFilterCountResponseMultiError is an error wrapping multiple
// validation errors returned by PreliminaryFilterCountResponse.ValidateAll()
// if the designated constraints aren't met.
type PreliminaryFilterCountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PreliminaryFilterCountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PreliminaryFilterCountResponseMultiError) AllErrors() []error { return m }

// PreliminaryFilterCountResponseValidationError is the validation error
// returned by PreliminaryFilterCountResponse.Validate if the designated
// constraints aren't met.
type PreliminaryFilterCountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PreliminaryFilterCountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PreliminaryFilterCountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PreliminaryFilterCountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PreliminaryFilterCountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PreliminaryFilterCountResponseValidationError) ErrorName() string {
	return "PreliminaryFilterCountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PreliminaryFilterCountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPreliminaryFilterCountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PreliminaryFilterCountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PreliminaryFilterCountResponseValidationError{}

// Validate checks the field values on PagesCountRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PagesCountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PagesCountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PagesCountRequestMultiError, or nil if none found.
func (m *PagesCountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PagesCountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PagesCountRequestMultiError(errors)
	}

	return nil
}

// PagesCountRequestMultiError is an error wrapping multiple validation errors
// returned by PagesCountRequest.ValidateAll() if the designated constraints
// aren't met.
type PagesCountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PagesCountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PagesCountRequestMultiError) AllErrors() []error { return m }

// PagesCountRequestValidationError is the validation error returned by
// PagesCountRequest.Validate if the designated constraints aren't met.
type PagesCountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PagesCountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PagesCountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PagesCountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PagesCountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PagesCountRequestValidationError) ErrorName() string {
	return "PagesCountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PagesCountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPagesCountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PagesCountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PagesCountRequestValidationError{}

// Validate checks the field values on PagesCountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PagesCountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PagesCountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PagesCountResponseMultiError, or nil if none found.
func (m *PagesCountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PagesCountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PagesCountResponseMultiError(errors)
	}

	return nil
}

// PagesCountResponseMultiError is an error wrapping multiple validation errors
// returned by PagesCountResponse.ValidateAll() if the designated constraints
// aren't met.
type PagesCountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PagesCountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PagesCountResponseMultiError) AllErrors() []error { return m }

// PagesCountResponseValidationError is the validation error returned by
// PagesCountResponse.Validate if the designated constraints aren't met.
type PagesCountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PagesCountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PagesCountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PagesCountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PagesCountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PagesCountResponseValidationError) ErrorName() string {
	return "PagesCountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PagesCountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPagesCountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PagesCountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PagesCountResponseValidationError{}

// Validate checks the field values on GetCitiesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCitiesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCitiesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCitiesRequestMultiError, or nil if none found.
func (m *GetCitiesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCitiesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetCitiesRequestMultiError(errors)
	}

	return nil
}

// GetCitiesRequestMultiError is an error wrapping multiple validation errors
// returned by GetCitiesRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCitiesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCitiesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCitiesRequestMultiError) AllErrors() []error { return m }

// GetCitiesRequestValidationError is the validation error returned by
// GetCitiesRequest.Validate if the designated constraints aren't met.
type GetCitiesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCitiesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCitiesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCitiesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCitiesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCitiesRequestValidationError) ErrorName() string { return "GetCitiesRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetCitiesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCitiesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCitiesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCitiesRequestValidationError{}

// Validate checks the field values on CitiesResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CitiesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CitiesResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CitiesResponseMultiError,
// or nil if none found.
func (m *CitiesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CitiesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CitiesResponseMultiError(errors)
	}

	return nil
}

// CitiesResponseMultiError is an error wrapping multiple validation errors
// returned by CitiesResponse.ValidateAll() if the designated constraints
// aren't met.
type CitiesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CitiesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CitiesResponseMultiError) AllErrors() []error { return m }

// CitiesResponseValidationError is the validation error returned by
// CitiesResponse.Validate if the designated constraints aren't met.
type CitiesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CitiesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CitiesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CitiesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CitiesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CitiesResponseValidationError) ErrorName() string { return "CitiesResponseValidationError" }

// Error satisfies the builtin error interface
func (e CitiesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCitiesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CitiesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CitiesResponseValidationError{}

// Validate checks the field values on GetSpecialitiesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSpecialitiesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSpecialitiesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSpecialitiesRequestMultiError, or nil if none found.
func (m *GetSpecialitiesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSpecialitiesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetSpecialitiesRequestMultiError(errors)
	}

	return nil
}

// GetSpecialitiesRequestMultiError is an error wrapping multiple validation
// errors returned by GetSpecialitiesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetSpecialitiesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSpecialitiesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSpecialitiesRequestMultiError) AllErrors() []error { return m }

// GetSpecialitiesRequestValidationError is the validation error returned by
// GetSpecialitiesRequest.Validate if the designated constraints aren't met.
type GetSpecialitiesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSpecialitiesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSpecialitiesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSpecialitiesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSpecialitiesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSpecialitiesRequestValidationError) ErrorName() string {
	return "GetSpecialitiesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSpecialitiesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSpecialitiesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSpecialitiesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSpecialitiesRequestValidationError{}

// Validate checks the field values on SpecialitiesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SpecialitiesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpecialitiesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SpecialitiesResponseMultiError, or nil if none found.
func (m *SpecialitiesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SpecialitiesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SpecialitiesResponseMultiError(errors)
	}

	return nil
}

// SpecialitiesResponseMultiError is an error wrapping multiple validation
// errors returned by SpecialitiesResponse.ValidateAll() if the designated
// constraints aren't met.
type SpecialitiesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpecialitiesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpecialitiesResponseMultiError) AllErrors() []error { return m }

// SpecialitiesResponseValidationError is the validation error returned by
// SpecialitiesResponse.Validate if the designated constraints aren't met.
type SpecialitiesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpecialitiesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpecialitiesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpecialitiesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpecialitiesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpecialitiesResponseValidationError) ErrorName() string {
	return "SpecialitiesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SpecialitiesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpecialitiesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpecialitiesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpecialitiesResponseValidationError{}

// Validate checks the field values on SearchRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SearchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SearchRequestMultiError, or
// nil if none found.
func (m *SearchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SearchRequestMultiError(errors)
	}

	return nil
}

// SearchRequestMultiError is an error wrapping multiple validation errors
// returned by SearchRequest.ValidateAll() if the designated constraints
// aren't met.
type SearchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchRequestMultiError) AllErrors() []error { return m }

// SearchRequestValidationError is the validation error returned by
// SearchRequest.Validate if the designated constraints aren't met.
type SearchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchRequestValidationError) ErrorName() string { return "SearchRequestValidationError" }

// Error satisfies the builtin error interface
func (e SearchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchRequestValidationError{}

// Validate checks the field values on SearchResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SearchResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SearchResponseMultiError,
// or nil if none found.
func (m *SearchResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SearchResponseMultiError(errors)
	}

	return nil
}

// SearchResponseMultiError is an error wrapping multiple validation errors
// returned by SearchResponse.ValidateAll() if the designated constraints
// aren't met.
type SearchResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchResponseMultiError) AllErrors() []error { return m }

// SearchResponseValidationError is the validation error returned by
// SearchResponse.Validate if the designated constraints aren't met.
type SearchResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchResponseValidationError) ErrorName() string { return "SearchResponseValidationError" }

// Error satisfies the builtin error interface
func (e SearchResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchResponseValidationError{}

// Validate checks the field values on FilterRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FilterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilterRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FilterRequestMultiError, or
// nil if none found.
func (m *FilterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FilterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return FilterRequestMultiError(errors)
	}

	return nil
}

// FilterRequestMultiError is an error wrapping multiple validation errors
// returned by FilterRequest.ValidateAll() if the designated constraints
// aren't met.
type FilterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilterRequestMultiError) AllErrors() []error { return m }

// FilterRequestValidationError is the validation error returned by
// FilterRequest.Validate if the designated constraints aren't met.
type FilterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilterRequestValidationError) ErrorName() string { return "FilterRequestValidationError" }

// Error satisfies the builtin error interface
func (e FilterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilterRequestValidationError{}

// Validate checks the field values on FilterResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FilterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilterResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FilterResponseMultiError,
// or nil if none found.
func (m *FilterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FilterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return FilterResponseMultiError(errors)
	}

	return nil
}

// FilterResponseMultiError is an error wrapping multiple validation errors
// returned by FilterResponse.ValidateAll() if the designated constraints
// aren't met.
type FilterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilterResponseMultiError) AllErrors() []error { return m }

// FilterResponseValidationError is the validation error returned by
// FilterResponse.Validate if the designated constraints aren't met.
type FilterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilterResponseValidationError) ErrorName() string { return "FilterResponseValidationError" }

// Error satisfies the builtin error interface
func (e FilterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilterResponseValidationError{}

// Validate checks the field values on CreateFreelancersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateFreelancersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateFreelancersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateFreelancersRequestMultiError, or nil if none found.
func (m *CreateFreelancersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateFreelancersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateFreelancersRequestMultiError(errors)
	}

	return nil
}

// CreateFreelancersRequestMultiError is an error wrapping multiple validation
// errors returned by CreateFreelancersRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateFreelancersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateFreelancersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateFreelancersRequestMultiError) AllErrors() []error { return m }

// CreateFreelancersRequestValidationError is the validation error returned by
// CreateFreelancersRequest.Validate if the designated constraints aren't met.
type CreateFreelancersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFreelancersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFreelancersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFreelancersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFreelancersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFreelancersRequestValidationError) ErrorName() string {
	return "CreateFreelancersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateFreelancersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFreelancersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFreelancersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFreelancersRequestValidationError{}

// Validate checks the field values on CreateFreelancersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateFreelancersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateFreelancersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateFreelancersResponseMultiError, or nil if none found.
func (m *CreateFreelancersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateFreelancersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateFreelancersResponseMultiError(errors)
	}

	return nil
}

// CreateFreelancersResponseMultiError is an error wrapping multiple validation
// errors returned by CreateFreelancersResponse.ValidateAll() if the
// designated constraints aren't met.
type CreateFreelancersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateFreelancersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateFreelancersResponseMultiError) AllErrors() []error { return m }

// CreateFreelancersResponseValidationError is the validation error returned by
// CreateFreelancersResponse.Validate if the designated constraints aren't met.
type CreateFreelancersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFreelancersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFreelancersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFreelancersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFreelancersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFreelancersResponseValidationError) ErrorName() string {
	return "CreateFreelancersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateFreelancersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFreelancersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFreelancersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFreelancersResponseValidationError{}

// Validate checks the field values on GetFreelancerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFreelancerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFreelancerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFreelancerRequestMultiError, or nil if none found.
func (m *GetFreelancerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFreelancerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FreelancerSlug

	if len(errors) > 0 {
		return GetFreelancerRequestMultiError(errors)
	}

	return nil
}

// GetFreelancerRequestMultiError is an error wrapping multiple validation
// errors returned by GetFreelancerRequest.ValidateAll() if the designated
// constraints aren't met.
type GetFreelancerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFreelancerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFreelancerRequestMultiError) AllErrors() []error { return m }

// GetFreelancerRequestValidationError is the validation error returned by
// GetFreelancerRequest.Validate if the designated constraints aren't met.
type GetFreelancerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFreelancerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFreelancerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFreelancerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFreelancerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFreelancerRequestValidationError) ErrorName() string {
	return "GetFreelancerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetFreelancerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFreelancerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFreelancerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFreelancerRequestValidationError{}

// Validate checks the field values on GetFreelancerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFreelancerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFreelancerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFreelancerResponseMultiError, or nil if none found.
func (m *GetFreelancerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFreelancerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetFreelancerResponseMultiError(errors)
	}

	return nil
}

// GetFreelancerResponseMultiError is an error wrapping multiple validation
// errors returned by GetFreelancerResponse.ValidateAll() if the designated
// constraints aren't met.
type GetFreelancerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFreelancerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFreelancerResponseMultiError) AllErrors() []error { return m }

// GetFreelancerResponseValidationError is the validation error returned by
// GetFreelancerResponse.Validate if the designated constraints aren't met.
type GetFreelancerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFreelancerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFreelancerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFreelancerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFreelancerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFreelancerResponseValidationError) ErrorName() string {
	return "GetFreelancerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetFreelancerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFreelancerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFreelancerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFreelancerResponseValidationError{}
