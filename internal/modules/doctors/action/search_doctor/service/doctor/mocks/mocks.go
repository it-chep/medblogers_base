// Code generated by MockGen. DO NOT EDIT.
// Source: medblogers_base/internal/modules/doctors/action/search_doctor/service/doctor (interfaces: SearchStorage,ImageGetter)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	doctor "medblogers_base/internal/modules/doctors/domain/doctor"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSearchStorage is a mock of SearchStorage interface.
type MockSearchStorage struct {
	ctrl     *gomock.Controller
	recorder *MockSearchStorageMockRecorder
}

// MockSearchStorageMockRecorder is the mock recorder for MockSearchStorage.
type MockSearchStorageMockRecorder struct {
	mock *MockSearchStorage
}

// NewMockSearchStorage creates a new mock instance.
func NewMockSearchStorage(ctrl *gomock.Controller) *MockSearchStorage {
	mock := &MockSearchStorage{ctrl: ctrl}
	mock.recorder = &MockSearchStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSearchStorage) EXPECT() *MockSearchStorageMockRecorder {
	return m.recorder
}

// SearchDoctors mocks base method.
func (m *MockSearchStorage) SearchDoctors(arg0 context.Context, arg1 string) ([]*doctor.Doctor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchDoctors", arg0, arg1)
	ret0, _ := ret[0].([]*doctor.Doctor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchDoctors indicates an expected call of SearchDoctors.
func (mr *MockSearchStorageMockRecorder) SearchDoctors(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchDoctors", reflect.TypeOf((*MockSearchStorage)(nil).SearchDoctors), arg0, arg1)
}

// MockImageGetter is a mock of ImageGetter interface.
type MockImageGetter struct {
	ctrl     *gomock.Controller
	recorder *MockImageGetterMockRecorder
}

// MockImageGetterMockRecorder is the mock recorder for MockImageGetter.
type MockImageGetterMockRecorder struct {
	mock *MockImageGetter
}

// NewMockImageGetter creates a new mock instance.
func NewMockImageGetter(ctrl *gomock.Controller) *MockImageGetter {
	mock := &MockImageGetter{ctrl: ctrl}
	mock.recorder = &MockImageGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageGetter) EXPECT() *MockImageGetterMockRecorder {
	return m.recorder
}

// GetUserPhotos mocks base method.
func (m *MockImageGetter) GetUserPhotos(arg0 context.Context) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPhotos", arg0)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPhotos indicates an expected call of GetUserPhotos.
func (mr *MockImageGetterMockRecorder) GetUserPhotos(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPhotos", reflect.TypeOf((*MockImageGetter)(nil).GetUserPhotos), arg0)
}
