// Code generated by MockGen. DO NOT EDIT.
// Source: medblogers_base/internal/modules/doctors/action/doctor_detail/service/enricher (interfaces: ImageGetter)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockImageGetter is a mock of ImageGetter interface.
type MockImageGetter struct {
	ctrl     *gomock.Controller
	recorder *MockImageGetterMockRecorder
}

// MockImageGetterMockRecorder is the mock recorder for MockImageGetter.
type MockImageGetterMockRecorder struct {
	mock *MockImageGetter
}

// NewMockImageGetter creates a new mock instance.
func NewMockImageGetter(ctrl *gomock.Controller) *MockImageGetter {
	mock := &MockImageGetter{ctrl: ctrl}
	mock.recorder = &MockImageGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageGetter) EXPECT() *MockImageGetterMockRecorder {
	return m.recorder
}

// GeneratePresignedURL mocks base method.
func (m *MockImageGetter) GeneratePresignedURL(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeneratePresignedURL", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeneratePresignedURL indicates an expected call of GeneratePresignedURL.
func (mr *MockImageGetterMockRecorder) GeneratePresignedURL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeneratePresignedURL", reflect.TypeOf((*MockImageGetter)(nil).GeneratePresignedURL), arg0, arg1)
}
