// Code generated by MockGen. DO NOT EDIT.
// Source: medblogers_base/internal/modules/doctors/action/doctor_detail/service/additional_items (interfaces: Storage)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	city "medblogers_base/internal/modules/doctors/domain/city"
	doctor "medblogers_base/internal/modules/doctors/domain/doctor"
	speciality "medblogers_base/internal/modules/doctors/domain/speciality"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// GetDoctorAdditionalCities mocks base method.
func (m *MockStorage) GetDoctorAdditionalCities(arg0 context.Context, arg1 doctor.MedblogersID) (map[city.CityID]*city.City, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDoctorAdditionalCities", arg0, arg1)
	ret0, _ := ret[0].(map[city.CityID]*city.City)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDoctorAdditionalCities indicates an expected call of GetDoctorAdditionalCities.
func (mr *MockStorageMockRecorder) GetDoctorAdditionalCities(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDoctorAdditionalCities", reflect.TypeOf((*MockStorage)(nil).GetDoctorAdditionalCities), arg0, arg1)
}

// GetDoctorAdditionalSpecialities mocks base method.
func (m *MockStorage) GetDoctorAdditionalSpecialities(arg0 context.Context, arg1 doctor.MedblogersID) (map[speciality.SpecialityID]*speciality.Speciality, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDoctorAdditionalSpecialities", arg0, arg1)
	ret0, _ := ret[0].(map[speciality.SpecialityID]*speciality.Speciality)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDoctorAdditionalSpecialities indicates an expected call of GetDoctorAdditionalSpecialities.
func (mr *MockStorageMockRecorder) GetDoctorAdditionalSpecialities(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDoctorAdditionalSpecialities", reflect.TypeOf((*MockStorage)(nil).GetDoctorAdditionalSpecialities), arg0, arg1)
}
