// Code generated by MockGen. DO NOT EDIT.
// Source: medblogers_base/internal/modules/doctors/action/settings/service/settings (interfaces: CityStorage,SpecialityStorage,SubscribersGetter)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	indto "medblogers_base/internal/modules/doctors/client/subscribers/indto"
	city "medblogers_base/internal/modules/doctors/domain/city"
	speciality "medblogers_base/internal/modules/doctors/domain/speciality"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCityStorage is a mock of CityStorage interface.
type MockCityStorage struct {
	ctrl     *gomock.Controller
	recorder *MockCityStorageMockRecorder
}

// MockCityStorageMockRecorder is the mock recorder for MockCityStorage.
type MockCityStorageMockRecorder struct {
	mock *MockCityStorage
}

// NewMockCityStorage creates a new mock instance.
func NewMockCityStorage(ctrl *gomock.Controller) *MockCityStorage {
	mock := &MockCityStorage{ctrl: ctrl}
	mock.recorder = &MockCityStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCityStorage) EXPECT() *MockCityStorageMockRecorder {
	return m.recorder
}

// GetCitiesWithDoctorsCount mocks base method.
func (m *MockCityStorage) GetCitiesWithDoctorsCount(arg0 context.Context) ([]*city.City, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCitiesWithDoctorsCount", arg0)
	ret0, _ := ret[0].([]*city.City)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCitiesWithDoctorsCount indicates an expected call of GetCitiesWithDoctorsCount.
func (mr *MockCityStorageMockRecorder) GetCitiesWithDoctorsCount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCitiesWithDoctorsCount", reflect.TypeOf((*MockCityStorage)(nil).GetCitiesWithDoctorsCount), arg0)
}

// MockSpecialityStorage is a mock of SpecialityStorage interface.
type MockSpecialityStorage struct {
	ctrl     *gomock.Controller
	recorder *MockSpecialityStorageMockRecorder
}

// MockSpecialityStorageMockRecorder is the mock recorder for MockSpecialityStorage.
type MockSpecialityStorageMockRecorder struct {
	mock *MockSpecialityStorage
}

// NewMockSpecialityStorage creates a new mock instance.
func NewMockSpecialityStorage(ctrl *gomock.Controller) *MockSpecialityStorage {
	mock := &MockSpecialityStorage{ctrl: ctrl}
	mock.recorder = &MockSpecialityStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpecialityStorage) EXPECT() *MockSpecialityStorageMockRecorder {
	return m.recorder
}

// GetSpecialitiesWithDoctorsCount mocks base method.
func (m *MockSpecialityStorage) GetSpecialitiesWithDoctorsCount(arg0 context.Context) ([]*speciality.Speciality, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpecialitiesWithDoctorsCount", arg0)
	ret0, _ := ret[0].([]*speciality.Speciality)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpecialitiesWithDoctorsCount indicates an expected call of GetSpecialitiesWithDoctorsCount.
func (mr *MockSpecialityStorageMockRecorder) GetSpecialitiesWithDoctorsCount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpecialitiesWithDoctorsCount", reflect.TypeOf((*MockSpecialityStorage)(nil).GetSpecialitiesWithDoctorsCount), arg0)
}

// MockSubscribersGetter is a mock of SubscribersGetter interface.
type MockSubscribersGetter struct {
	ctrl     *gomock.Controller
	recorder *MockSubscribersGetterMockRecorder
}

// MockSubscribersGetterMockRecorder is the mock recorder for MockSubscribersGetter.
type MockSubscribersGetterMockRecorder struct {
	mock *MockSubscribersGetter
}

// NewMockSubscribersGetter creates a new mock instance.
func NewMockSubscribersGetter(ctrl *gomock.Controller) *MockSubscribersGetter {
	mock := &MockSubscribersGetter{ctrl: ctrl}
	mock.recorder = &MockSubscribersGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscribersGetter) EXPECT() *MockSubscribersGetterMockRecorder {
	return m.recorder
}

// GetFilterInfo mocks base method.
func (m *MockSubscribersGetter) GetFilterInfo(arg0 context.Context) ([]indto.FilterInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilterInfo", arg0)
	ret0, _ := ret[0].([]indto.FilterInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilterInfo indicates an expected call of GetFilterInfo.
func (mr *MockSubscribersGetterMockRecorder) GetFilterInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilterInfo", reflect.TypeOf((*MockSubscribersGetter)(nil).GetFilterInfo), arg0)
}
