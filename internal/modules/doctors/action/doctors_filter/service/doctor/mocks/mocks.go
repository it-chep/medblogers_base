// Code generated by MockGen. DO NOT EDIT.
// Source: medblogers_base/internal/modules/doctors/action/doctors_filter/service/doctor (interfaces: Storage,ImageEnricher,SubscribersEnricher,AdditionalStorage)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	dto "medblogers_base/internal/modules/doctors/action/doctors_filter/dto"
	indto "medblogers_base/internal/modules/doctors/client/subscribers/indto"
	doctor "medblogers_base/internal/modules/doctors/domain/doctor"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// FilterDoctors mocks base method.
func (m *MockStorage) FilterDoctors(arg0 context.Context, arg1 *dto.Filter) (map[doctor.MedblogersID]*doctor.Doctor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterDoctors", arg0, arg1)
	ret0, _ := ret[0].(map[doctor.MedblogersID]*doctor.Doctor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterDoctors indicates an expected call of FilterDoctors.
func (mr *MockStorageMockRecorder) FilterDoctors(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterDoctors", reflect.TypeOf((*MockStorage)(nil).FilterDoctors), arg0, arg1)
}

// GetDoctors mocks base method.
func (m *MockStorage) GetDoctors(arg0 context.Context, arg1, arg2 int64) (map[doctor.MedblogersID]*doctor.Doctor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDoctors", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[doctor.MedblogersID]*doctor.Doctor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDoctors indicates an expected call of GetDoctors.
func (mr *MockStorageMockRecorder) GetDoctors(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDoctors", reflect.TypeOf((*MockStorage)(nil).GetDoctors), arg0, arg1, arg2)
}

// GetDoctorsByIDs mocks base method.
func (m *MockStorage) GetDoctorsByIDs(arg0 context.Context, arg1 []int64) (map[doctor.MedblogersID]*doctor.Doctor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDoctorsByIDs", arg0, arg1)
	ret0, _ := ret[0].(map[doctor.MedblogersID]*doctor.Doctor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDoctorsByIDs indicates an expected call of GetDoctorsByIDs.
func (mr *MockStorageMockRecorder) GetDoctorsByIDs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDoctorsByIDs", reflect.TypeOf((*MockStorage)(nil).GetDoctorsByIDs), arg0, arg1)
}

// MockImageEnricher is a mock of ImageEnricher interface.
type MockImageEnricher struct {
	ctrl     *gomock.Controller
	recorder *MockImageEnricherMockRecorder
}

// MockImageEnricherMockRecorder is the mock recorder for MockImageEnricher.
type MockImageEnricherMockRecorder struct {
	mock *MockImageEnricher
}

// NewMockImageEnricher creates a new mock instance.
func NewMockImageEnricher(ctrl *gomock.Controller) *MockImageEnricher {
	mock := &MockImageEnricher{ctrl: ctrl}
	mock.recorder = &MockImageEnricherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageEnricher) EXPECT() *MockImageEnricherMockRecorder {
	return m.recorder
}

// GetUserPhotos mocks base method.
func (m *MockImageEnricher) GetUserPhotos(arg0 context.Context) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPhotos", arg0)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPhotos indicates an expected call of GetUserPhotos.
func (mr *MockImageEnricherMockRecorder) GetUserPhotos(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPhotos", reflect.TypeOf((*MockImageEnricher)(nil).GetUserPhotos), arg0)
}

// MockSubscribersEnricher is a mock of SubscribersEnricher interface.
type MockSubscribersEnricher struct {
	ctrl     *gomock.Controller
	recorder *MockSubscribersEnricherMockRecorder
}

// MockSubscribersEnricherMockRecorder is the mock recorder for MockSubscribersEnricher.
type MockSubscribersEnricherMockRecorder struct {
	mock *MockSubscribersEnricher
}

// NewMockSubscribersEnricher creates a new mock instance.
func NewMockSubscribersEnricher(ctrl *gomock.Controller) *MockSubscribersEnricher {
	mock := &MockSubscribersEnricher{ctrl: ctrl}
	mock.recorder = &MockSubscribersEnricherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscribersEnricher) EXPECT() *MockSubscribersEnricherMockRecorder {
	return m.recorder
}

// GetSubscribersByDoctorIDs mocks base method.
func (m *MockSubscribersEnricher) GetSubscribersByDoctorIDs(arg0 context.Context, arg1 []int64) (map[int64]indto.GetSubscribersByDoctorIDsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscribersByDoctorIDs", arg0, arg1)
	ret0, _ := ret[0].(map[int64]indto.GetSubscribersByDoctorIDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscribersByDoctorIDs indicates an expected call of GetSubscribersByDoctorIDs.
func (mr *MockSubscribersEnricherMockRecorder) GetSubscribersByDoctorIDs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscribersByDoctorIDs", reflect.TypeOf((*MockSubscribersEnricher)(nil).GetSubscribersByDoctorIDs), arg0, arg1)
}

// MockAdditionalStorage is a mock of AdditionalStorage interface.
type MockAdditionalStorage struct {
	ctrl     *gomock.Controller
	recorder *MockAdditionalStorageMockRecorder
}

// MockAdditionalStorageMockRecorder is the mock recorder for MockAdditionalStorage.
type MockAdditionalStorageMockRecorder struct {
	mock *MockAdditionalStorage
}

// NewMockAdditionalStorage creates a new mock instance.
func NewMockAdditionalStorage(ctrl *gomock.Controller) *MockAdditionalStorage {
	mock := &MockAdditionalStorage{ctrl: ctrl}
	mock.recorder = &MockAdditionalStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdditionalStorage) EXPECT() *MockAdditionalStorageMockRecorder {
	return m.recorder
}

// GetDoctorAdditionalCities mocks base method.
func (m *MockAdditionalStorage) GetDoctorAdditionalCities(arg0 context.Context, arg1 []int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetDoctorAdditionalCities", arg0, arg1)
}

// GetDoctorAdditionalCities indicates an expected call of GetDoctorAdditionalCities.
func (mr *MockAdditionalStorageMockRecorder) GetDoctorAdditionalCities(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDoctorAdditionalCities", reflect.TypeOf((*MockAdditionalStorage)(nil).GetDoctorAdditionalCities), arg0, arg1)
}

// GetDoctorAdditionalSpecialities mocks base method.
func (m *MockAdditionalStorage) GetDoctorAdditionalSpecialities(arg0 context.Context, arg1 []int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetDoctorAdditionalSpecialities", arg0, arg1)
}

// GetDoctorAdditionalSpecialities indicates an expected call of GetDoctorAdditionalSpecialities.
func (mr *MockAdditionalStorageMockRecorder) GetDoctorAdditionalSpecialities(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDoctorAdditionalSpecialities", reflect.TypeOf((*MockAdditionalStorage)(nil).GetDoctorAdditionalSpecialities), arg0, arg1)
}
