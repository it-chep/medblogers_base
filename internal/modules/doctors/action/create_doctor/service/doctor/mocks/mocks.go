// Code generated by MockGen. DO NOT EDIT.
// Source: medblogers_base/internal/modules/doctors/action/create_doctor/service/doctor (interfaces: Storage)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	dto "medblogers_base/internal/modules/doctors/action/create_doctor/dto"
	doctor "medblogers_base/internal/modules/doctors/domain/doctor"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// CreateAdditionalCities mocks base method.
func (m *MockStorage) CreateAdditionalCities(arg0 context.Context, arg1 doctor.MedblogersID, arg2 []int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAdditionalCities", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAdditionalCities indicates an expected call of CreateAdditionalCities.
func (mr *MockStorageMockRecorder) CreateAdditionalCities(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAdditionalCities", reflect.TypeOf((*MockStorage)(nil).CreateAdditionalCities), arg0, arg1, arg2)
}

// CreateAdditionalSpecialities mocks base method.
func (m *MockStorage) CreateAdditionalSpecialities(arg0 context.Context, arg1 doctor.MedblogersID, arg2 []int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAdditionalSpecialities", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAdditionalSpecialities indicates an expected call of CreateAdditionalSpecialities.
func (mr *MockStorageMockRecorder) CreateAdditionalSpecialities(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAdditionalSpecialities", reflect.TypeOf((*MockStorage)(nil).CreateAdditionalSpecialities), arg0, arg1, arg2)
}

// CreateDoctor mocks base method.
func (m *MockStorage) CreateDoctor(arg0 context.Context, arg1 dto.CreateDoctorRequest) (doctor.MedblogersID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDoctor", arg0, arg1)
	ret0, _ := ret[0].(doctor.MedblogersID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDoctor indicates an expected call of CreateDoctor.
func (mr *MockStorageMockRecorder) CreateDoctor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDoctor", reflect.TypeOf((*MockStorage)(nil).CreateDoctor), arg0, arg1)
}
