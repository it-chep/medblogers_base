// Code generated by MockGen. DO NOT EDIT.
// Source: medblogers_base/internal/modules/doctors/action/create_doctor/service/external (interfaces: Config,NotificationClient,SubscribersClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	dto "medblogers_base/internal/modules/doctors/action/create_doctor/dto"
	indto "medblogers_base/internal/modules/doctors/client/subscribers/indto"
	doctor "medblogers_base/internal/modules/doctors/domain/doctor"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockConfig is a mock of Config interface.
type MockConfig struct {
	ctrl     *gomock.Controller
	recorder *MockConfigMockRecorder
}

// MockConfigMockRecorder is the mock recorder for MockConfig.
type MockConfigMockRecorder struct {
	mock *MockConfig
}

// NewMockConfig creates a new mock instance.
func NewMockConfig(ctrl *gomock.Controller) *MockConfig {
	mock := &MockConfig{ctrl: ctrl}
	mock.recorder = &MockConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfig) EXPECT() *MockConfigMockRecorder {
	return m.recorder
}

// GetCreateNotificationChatID mocks base method.
func (m *MockConfig) GetCreateNotificationChatID() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCreateNotificationChatID")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetCreateNotificationChatID indicates an expected call of GetCreateNotificationChatID.
func (mr *MockConfigMockRecorder) GetCreateNotificationChatID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCreateNotificationChatID", reflect.TypeOf((*MockConfig)(nil).GetCreateNotificationChatID))
}

// MockNotificationClient is a mock of NotificationClient interface.
type MockNotificationClient struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationClientMockRecorder
}

// MockNotificationClientMockRecorder is the mock recorder for MockNotificationClient.
type MockNotificationClientMockRecorder struct {
	mock *MockNotificationClient
}

// NewMockNotificationClient creates a new mock instance.
func NewMockNotificationClient(ctrl *gomock.Controller) *MockNotificationClient {
	mock := &MockNotificationClient{ctrl: ctrl}
	mock.recorder = &MockNotificationClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationClient) EXPECT() *MockNotificationClientMockRecorder {
	return m.recorder
}

// NotificatorCreateDoctor mocks base method.
func (m *MockNotificationClient) NotificatorCreateDoctor(arg0 context.Context, arg1 dto.CreateDoctorRequest, arg2 int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NotificatorCreateDoctor", arg0, arg1, arg2)
}

// NotificatorCreateDoctor indicates an expected call of NotificatorCreateDoctor.
func (mr *MockNotificationClientMockRecorder) NotificatorCreateDoctor(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotificatorCreateDoctor", reflect.TypeOf((*MockNotificationClient)(nil).NotificatorCreateDoctor), arg0, arg1, arg2)
}

// MockSubscribersClient is a mock of SubscribersClient interface.
type MockSubscribersClient struct {
	ctrl     *gomock.Controller
	recorder *MockSubscribersClientMockRecorder
}

// MockSubscribersClientMockRecorder is the mock recorder for MockSubscribersClient.
type MockSubscribersClientMockRecorder struct {
	mock *MockSubscribersClient
}

// NewMockSubscribersClient creates a new mock instance.
func NewMockSubscribersClient(ctrl *gomock.Controller) *MockSubscribersClient {
	mock := &MockSubscribersClient{ctrl: ctrl}
	mock.recorder = &MockSubscribersClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscribersClient) EXPECT() *MockSubscribersClientMockRecorder {
	return m.recorder
}

// CreateDoctor mocks base method.
func (m *MockSubscribersClient) CreateDoctor(arg0 context.Context, arg1 doctor.MedblogersID, arg2 indto.CreateDoctorRequest) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDoctor", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDoctor indicates an expected call of CreateDoctor.
func (mr *MockSubscribersClientMockRecorder) CreateDoctor(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDoctor", reflect.TypeOf((*MockSubscribersClient)(nil).CreateDoctor), arg0, arg1, arg2)
}
