// Code generated by MockGen. DO NOT EDIT.
// Source: medblogers_base/internal/modules/doctors/action/preliminary_filter_count/service/doctor (interfaces: Storage)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	dto "medblogers_base/internal/modules/doctors/action/preliminary_filter_count/dto"
	doctor "medblogers_base/internal/modules/doctors/domain/doctor"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// FilterDoctors mocks base method.
func (m *MockStorage) FilterDoctors(arg0 context.Context, arg1 dto.Filter) (map[doctor.MedblogersID]*doctor.Doctor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterDoctors", arg0, arg1)
	ret0, _ := ret[0].(map[doctor.MedblogersID]*doctor.Doctor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterDoctors indicates an expected call of FilterDoctors.
func (mr *MockStorageMockRecorder) FilterDoctors(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterDoctors", reflect.TypeOf((*MockStorage)(nil).FilterDoctors), arg0, arg1)
}
