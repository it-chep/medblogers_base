// Code generated by MockGen. DO NOT EDIT.
// Source: medblogers_base/internal/modules/freelancers/action/create_freelancer/service/external (interfaces: Config,NotificationClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	dto "medblogers_base/internal/modules/freelancers/action/create_freelancer/dto"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockConfig is a mock of Config interface.
type MockConfig struct {
	ctrl     *gomock.Controller
	recorder *MockConfigMockRecorder
}

// MockConfigMockRecorder is the mock recorder for MockConfig.
type MockConfigMockRecorder struct {
	mock *MockConfig
}

// NewMockConfig creates a new mock instance.
func NewMockConfig(ctrl *gomock.Controller) *MockConfig {
	mock := &MockConfig{ctrl: ctrl}
	mock.recorder = &MockConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfig) EXPECT() *MockConfigMockRecorder {
	return m.recorder
}

// GetCreateNotificationChatID mocks base method.
func (m *MockConfig) GetCreateNotificationChatID() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCreateNotificationChatID")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetCreateNotificationChatID indicates an expected call of GetCreateNotificationChatID.
func (mr *MockConfigMockRecorder) GetCreateNotificationChatID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCreateNotificationChatID", reflect.TypeOf((*MockConfig)(nil).GetCreateNotificationChatID))
}

// MockNotificationClient is a mock of NotificationClient interface.
type MockNotificationClient struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationClientMockRecorder
}

// MockNotificationClientMockRecorder is the mock recorder for MockNotificationClient.
type MockNotificationClientMockRecorder struct {
	mock *MockNotificationClient
}

// NewMockNotificationClient creates a new mock instance.
func NewMockNotificationClient(ctrl *gomock.Controller) *MockNotificationClient {
	mock := &MockNotificationClient{ctrl: ctrl}
	mock.recorder = &MockNotificationClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationClient) EXPECT() *MockNotificationClientMockRecorder {
	return m.recorder
}

// NotificatorCreateFreelancer mocks base method.
func (m *MockNotificationClient) NotificatorCreateFreelancer(arg0 context.Context, arg1 dto.CreateRequest, arg2 int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NotificatorCreateFreelancer", arg0, arg1, arg2)
}

// NotificatorCreateFreelancer indicates an expected call of NotificatorCreateFreelancer.
func (mr *MockNotificationClientMockRecorder) NotificatorCreateFreelancer(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotificatorCreateFreelancer", reflect.TypeOf((*MockNotificationClient)(nil).NotificatorCreateFreelancer), arg0, arg1, arg2)
}
